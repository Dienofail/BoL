if myHero.charName ~= "Lulu" then
  return
end
function c(bytes)
  s = {}
  for i in pairs(bytes) do
    s[i] = string.char(bytes[i])
  end
  return table.concat(s)
end
_ENV[c({
  100,
  101,
  118,
  110,
  97,
  109,
  101
})] = c({
  100,
  105,
  101,
  110,
  111,
  102,
  97,
  105,
  108
})
_ENV[c({
  115,
  99,
  114,
  105,
  112,
  116,
  110,
  97,
  109,
  101
})] = "lulu"
_ENV[c({
  115,
  99,
  114,
  105,
  112,
  116,
  118,
  101,
  114
})] = 0.2
--LoadProtectedScript("VjUzEzdFTURpN0NFYN50TGhvRUxAbTNLRXlNeER2ZUVMRm1zSyB5TXlMMuXFU0DtM0lFeU19RXJlRRMHbTdFRXlNOykeJDA4KCRdISAaOXlHcmVFTUBtM0pFeU17RnppRUxA6zMLRb8NOUZ05AVMAGwzS1j4TXgCc2VFzYFtM4tE+U2kRvJn2MxAba4LxXlSecZyYUVMQGk0S0V5LAo1FxcxTERoM0tFFSIYInJhSExAbXEqNhx7TQIXBiooJW03SEV5TRsycmVFTEBsM0tFeU15RnJlRUxAbTNLRXlNeUZyZEVMQGwzS0V5TXlGcmVFTEBtM0tFeQ==152FFD869C72438577F413093F7FAC75")
--BolAuthInject("", _ENV)
--failreasononend = true
--failmessage = "Fail Auth "
--authmessage = "Authed as " .. UserName
--validatingmessage = "Validating"
--noservers = "No Servers"
local version = "0.20"
local ProdOneLoaded = false
function LoadInit()
  print("<font color=\"#FF0000\">DienoLulu: Please save file exactly as Lulu.lua in Scripts folder for autoupdater to work</font>")
   print("<font color=\"#FF0000\">DienoLulu: CRACKED BY SNORFLAKE</font>")
  DelayAction(checkOrbwalker, 5)
  DelayAction(Menu, 5.5)
  DelayAction(Init, 5.5)
end
require("VPrediction")
local OpenAccess = true
VP = VPrediction()
ProdOneLoaded = false
local IsSowLoaded = false
local isBeta = false
local ProdFile = LIB_PATH .. "Prodiction.lua"
local fh = io.open(ProdFile, "r")
if fh ~= nil then
  local line = fh:read()
  local Version = string.match(line, "%d+.%d+")
  if tonumber(Version) > 0.8 then
    ProdOneLoaded = true
  end
  if ProdOneLoaded then
    require("Prodiction")
    print("<font color=\"#FF0000\">Prodiction 1.0+ Loaded for DienoLulu, 1.0+ option is usable</font>")
  else
    print("<font color=\"#FF0000\">Prodiction 1.0+ not detected for DienoLulu, 1.0+ is not usable (will cause errors if checked)</font>")
  end
else
  print("<font color=\"#FF0000\">No Prodiction.lua detected, using only VPRED</font>")
end
math.randomseed(os.time() + GetInGameTimer() + GetTickCount())
local AUTOUPDATE = true
local UPDATE_NAME = "Lulu"
local UPDATE_HOST = "raw.github.com"
local VERSION_PATH = "/Dienofail/BoL/master/versions/Lulu.version" .. "?rand=" .. math.random(1, 10000)
local UPDATE_FILE_PATH = SCRIPT_PATH .. "Lulu.lua"
local UPDATE_FILE_PATH = string.gsub(UPDATE_FILE_PATH, "\\", "/")
local UPDATE_URL = "http://www.dienofail.com/Lulu.lua" .. "?rand=" .. math.random(1, 100000)
function Download()
  DownloadFile(UPDATE_URL, UPDATE_FILE_PATH, function()
    print("<font color=\"#FF0000\">DienoLulu Download Finished, Please Double F9 after auth</font>")
  end)
end
if AUTOUPDATE then
  local ServerData = GetWebResult(UPDATE_HOST, VERSION_PATH)
  if ServerData then
    local ServerVersion = string.match(ServerData, "%d+.%d+")
    if ServerVersion then
      ServerVersion = tonumber(ServerVersion)
      if ServerVersion > tonumber(version) then
        print("<font color=\"#FF0000\">New version available " .. ServerVersion .. "</font>")
        print("<font color=\"#FF0000\">Updating, please don't press F9</font>")
        DelayAction(Download, 2)
      else
        print("<font color=\"#FF0000\">You have got the latest version (" .. ServerVersion .. ")</font>")
      end
    end
  else
    print("<font color=\"#FF0000\">Error downloading version info</font>")
  end
end
class("Kalman")
function Kalman:__init()
  self.current_state_estimate = 0
  self.current_prob_estimate = 0
  self.Q = 1
  self.R = 15
end
function Kalman:STEP(control_vector, measurement_vector)
  local predicted_state_estimate = self.current_state_estimate + control_vector
  local predicted_prob_estimate = self.current_prob_estimate + self.Q
  local innovation = measurement_vector - predicted_state_estimate
  local innovation_covariance = predicted_prob_estimate + self.R
  local kalman_gain = predicted_prob_estimate / innovation_covariance
  self.current_state_estimate = predicted_state_estimate + kalman_gain * innovation
  self.current_prob_estimate = (1 - kalman_gain) * predicted_prob_estimate
  return self.current_state_estimate
end
local kalmanFilters = {}
local velocityTimers = {}
local oldPosx = {}
local oldPosz = {}
local oldTick = {}
local velocity = {}
local lastboost = {}
local velocity_TO = 10
local CONVERSATION_FACTOR = 975
local MS_MIN = 500
local MS_MEDIUM = 750
local last_pix_time = 0
local InterruptList = {
  {
    charName = "Caitlyn",
    spellName = "CaitlynAceintheHole"
  },
  {
    charName = "FiddleSticks",
    spellName = "Crowstorm"
  },
  {
    charName = "FiddleSticks",
    spellName = "DrainChannel"
  },
  {
    charName = "Galio",
    spellName = "GalioIdolOfDurand"
  },
  {charName = "Karthus", spellName = "FallenOne"},
  {charName = "Katarina", spellName = "KatarinaR"},
  {charName = "Lucian", spellName = "LucianR"},
  {
    charName = "Malzahar",
    spellName = "AlZaharNetherGrasp"
  },
  {
    charName = "MissFortune",
    spellName = "MissFortuneBulletTime"
  },
  {
    charName = "Nunu",
    spellName = "AbsoluteZero"
  },
  {
    charName = "Pantheon",
    spellName = "Pantheon_GrandSkyfall_Jump"
  },
  {
    charName = "Shen",
    spellName = "ShenStandUnited"
  },
  {charName = "Urgot", spellName = "UrgotSwap2"},
  {charName = "Varus", spellName = "VarusQ"},
  {
    charName = "Warwick",
    spellName = "InfiniteDuress"
  }
}
local initDone = false
local SpellQ = {
  Range = 900,
  Width = 50,
  Speed = 1530,
  Delay = 0.25
}
local SpellQ1 = {
  Range = 900,
  Width = 50,
  Speed = 1530,
  Delay = 0.25
}
local SpellQ2 = {
  Range = 1550,
  Width = 50,
  Speed = 1530,
  Delay = 0.5
}
local SpellW = {
  Range = 650,
  Width = 0,
  Speed = math.huge,
  Delay = 0.25
}
local SpellE = {
  Range = 650,
  Width = 0,
  Speed = math.huge,
  Delay = 0.25
}
local SpellR = {
  Range = 900,
  Width = 0,
  Speed = math.huge,
  Delay = 0.25
}
local ignite, igniteReady
local QReady, WReady, EReady, RReady = false, false, false, false
local Pix, lastAnimation
local lastAttack = 0
local lastAttackCD = 0
local lastWindUpTime = 0
local PixPosition
local eneplayeres = {}
local ToInterrupt = {}
local PixnetworkID
local IsSowLoaded = false
local LastSpellTick = 0
local LastETick = 0
local target, lastAnimation
local lastAttack = 0
local lastAttackCD = 0
local ignite
local lastWindUpTime = 0
VP = VPrediction()
local ignite, igniteReady = nil, false
function Init()
  for i = 1, heroManager.iCount do
    local hero = heroManager:GetHero(i)
    if hero.team ~= player.team then
      table.insert(eneplayeres, hero)
      kalmanFilters[hero.networkID] = Kalman()
      velocityTimers[hero.networkID] = 0
      oldPosx[hero.networkID] = 0
      oldPosz[hero.networkID] = 0
      oldTick[hero.networkID] = 0
      velocity[hero.networkID] = 0
      lastboost[hero.networkID] = 0
    end
    for _, champ in pairs(InterruptList) do
      if hero.charName == champ.charName then
        table.insert(ToInterrupt, champ.spellName)
      end
    end
  end
  ts = TargetSelector(TARGET_LESS_CAST_PRIORITY, 950, DAMAGE_MAGICAL)
  if not IsDDev() then
    ts2 = TargetSelector(TARGET_LESS_CAST_PRIORITY, 1600, DAMAGE_MAGICAL)
  else
    ts2 = TargetSelector(TARGET_LESS_CAST_PRIORITY, 2900, DAMAGE_MAGICAL)
  end
  ts.name = "Main"
  ts2.name = "Q Harass"
  Config:addTS(ts2)
  Config:addTS(ts)
  EnemyMinions = minionManager(MINION_ENEMY, 1600, myHero, MINION_SORT_MAXHEALTH_DEC)
  JungleMinions = minionManager(MINION_JUNGLE, 1200, myHero, MINION_SORT_MAXHEALTH_DEC)
  AllyMinions = minionManager(MINION_ALLY, 675, myHero, MINION_SORT_MAXHEALTH_DEC)
  initDone = true
  if not isBeta then
    print("<font color=\"#FF0000\">DienoLulu " .. tostring(version) .. " loaded!<font color=\"#FF0000\">")
  else
    print("<font color=\"#FF0000\">DienoLulu Nightly Beta " .. tostring(version) .. " loaded!<font color=\"#FF0000\">")
    print("<font color=\"#FF0000\"> Warning this is a nightly beta version: expect bugs!<font color=\"#FF0000\">")
  end
end
function Menu()
  Config = scriptConfig("Lulu", "Lulu")
  Config:addParam("Combo", "Combo", SCRIPT_PARAM_ONKEYDOWN, false, 32)
  Config:addParam("Farm", "Farm", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("V"))
  Config:addParam("Support", "Support Carry", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("X"))
  Config:addParam("Flee", "Flee", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("T"))
  Config:addParam("WNearest", "W Nearest Enemy", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("G"))
  Config:addSubMenu("Combo options", "ComboSub")
  Config:addSubMenu("Harass options", "HarassSub")
  Config:addSubMenu("Farm options", "FarmSub")
  Config:addSubMenu("KS", "KS")
  Config:addSubMenu("Support options", "SupportSub")
  Config:addSubMenu("Extra Config", "Extras")
  Config:addSubMenu("Draw", "Draw")
  Config.ComboSub:addParam("useQ", "Use Q", SCRIPT_PARAM_ONOFF, true)
  Config.ComboSub:addParam("useW", "Use W", SCRIPT_PARAM_ONOFF, true)
  Config.ComboSub:addParam("useE", "Use E", SCRIPT_PARAM_ONOFF, true)
  Config.ComboSub:addParam("useR", "Use R", SCRIPT_PARAM_ONOFF, true)
  Config.ComboSub:addParam("MinRHealth", "Min Health % for R (Lulu only)", SCRIPT_PARAM_SLICE, 20, 1, 100, 0)
  Config.ComboSub:addParam("Orbwalk", "Orbwalk", SCRIPT_PARAM_ONOFF, true)
  Config.ComboSub:addParam("RKnockup", "Min R Knockups", SCRIPT_PARAM_SLICE, 3, 1, 5, 0)
  local Allies = GetAllyHeroes()
  for idx, Ally in ipairs(Allies) do
    local teammate = Ally
    Config.ComboSub:addParam("ult" .. tostring(idx), "Enable R-Auto Knockup on " .. teammate.charName, SCRIPT_PARAM_ONOFF, true)
  end
  local Enemies = GetEnemyHeroes()
  for idx, enemy in ipairs(Enemies) do
    Config.ComboSub:addParam("W" .. tostring(enemy.charName), "Enable W usage on " .. enemy.charName, SCRIPT_PARAM_ONOFF, true)
  end
  Config.FarmSub:addParam("useQ", "Use Q", SCRIPT_PARAM_ONOFF, true)
  Config.FarmSub:addParam("useE", "Use E on self", SCRIPT_PARAM_ONOFF, true)
  Config.FarmSub:addParam("AoEQ", "Extend E for AoEQ", SCRIPT_PARAM_ONOFF, true)
  Config.FarmSub:addParam("MinionLimit", "Min num minions for farm", SCRIPT_PARAM_SLICE, 1, 1, 5, 0)
  Config.KS:addParam("useQ", "Use Q", SCRIPT_PARAM_ONOFF, true)
  Config.KS:addParam("useE", "Use E", SCRIPT_PARAM_ONOFF, true)
  Config.KS:addParam("Ignite", "Use Ignite", SCRIPT_PARAM_ONOFF, true)
  Config.HarassSub:addParam("useW", "Use W", SCRIPT_PARAM_ONOFF, true)
  Config.HarassSub:addParam("useE", "Use E to Extend Q", SCRIPT_PARAM_ONOFF, true)
  Config.HarassSub:addParam("useEAlone", "Use E Alone", SCRIPT_PARAM_ONOFF, true)
  Config.HarassSub:addParam("Orbwalk", "Orbwalk", SCRIPT_PARAM_ONOFF, true)
  Config.HarassSub:addParam("mManager", "Mana slider", SCRIPT_PARAM_SLICE, 0, 0, 100, 0)
  Config.HarassSub:addParam("Orbwalk", "Use own orbwalker", SCRIPT_PARAM_ONOFF, false)
  Config.HarassSub:addParam("ToggleMode", "Toggle mode (Requires Reload)", SCRIPT_PARAM_ONOFF, false)
  if not Config.HarassSub.ToggleMode then
    Config:addParam("Harass", "Harass (HOLD)", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("C"))
  else
    Config:addParam("Harass", "Harass (TOGGLE)", SCRIPT_PARAM_ONKEYTOGGLE, false, string.byte("C"))
  end
  local Allies = GetAllyHeroes()
  for idx, Ally in ipairs(Allies) do
    local teammate = Ally
    if teammate.team == myHero.team then
      if teammate.charName == "Jinx" or teammate.charName == "Lucian" or teammate.charName == "Sivir" or teammate.charName == "Kogmaw" or teammate.charName == "Twitch" or teammate.charName == "Graves" or teammate.charName == "Ezreal" or teammate.charName == "Ashe" or teammate.charName == "Quinn" or teammate.charName == "Vayne" or teammate.charName == "MissFortune" or teammate.charName == "Corki" or teammate.charName == "Varus" then
        Config.SupportSub:addParam("support" .. tostring(idx), "Support " .. teammate.charName, SCRIPT_PARAM_ONOFF, true)
      else
        Config.SupportSub:addParam("support" .. tostring(idx), "Support " .. teammate.charName, SCRIPT_PARAM_ONOFF, false)
      end
    end
  end
  Config.SupportSub:addParam("useQ", "Use Q", SCRIPT_PARAM_ONOFF, true)
  Config.SupportSub:addParam("useW", "Use W", SCRIPT_PARAM_ONOFF, true)
  Config.SupportSub:addParam("useE", "Use E", SCRIPT_PARAM_ONOFF, true)
  Config.SupportSub:addParam("useR", "Use R", SCRIPT_PARAM_ONOFF, true)
  Config.SupportSub:addParam("RKnockup", "Min R Knockups", SCRIPT_PARAM_SLICE, 3, 1, 5, 0)
  Config.SupportSub:addParam("MinRHealth", "Min Health % for R", SCRIPT_PARAM_SLICE, 20, 1, 100, 0)
  Config.SupportSub:addParam("MinEHealth", "Min Health % for E", SCRIPT_PARAM_SLICE, 75, 1, 100, 0)
  Config.SupportSub:addParam("WGapCloser", "W Enemy Gapclosers on Supported Allies", SCRIPT_PARAM_ONOFF, false)
  Config.SupportSub:addParam("AllowR", "Allow min R health % outside of support", SCRIPT_PARAM_ONOFF, false)
  Config.SupportSub:addParam("Orbwalk", "Orbwalk", SCRIPT_PARAM_ONOFF, true)
  Config.Draw:addParam("DrawQ", "Draw Q Range", SCRIPT_PARAM_ONOFF, true)
  Config.Draw:addParam("DrawQ2", "Draw Extended Q Range", SCRIPT_PARAM_ONOFF, true)
  Config.Draw:addParam("DrawW", "Draw W/E Range", SCRIPT_PARAM_ONOFF, false)
  Config.Draw:addParam("DrawR", "Draw R Range", SCRIPT_PARAM_ONOFF, false)
  Config.Draw:addParam("DrawTarget", "Draw Target", SCRIPT_PARAM_ONOFF, true)
  Config.Draw:addParam("DrawQPrediction", "Draw Q Prediction", SCRIPT_PARAM_ONOFF, false)
  Config.Draw:addParam("DrawPix", "Draw Pix", SCRIPT_PARAM_ONOFF, false)
  Config.Draw:addParam("DrawLastHit", "Draw Last Hit", SCRIPT_PARAM_ONOFF, false)
  Config.Extras:addParam("Debug", "Debug", SCRIPT_PARAM_ONOFF, false)
  Config.Extras:addParam("ExtendQ", "Extend Q with Pix", SCRIPT_PARAM_ONOFF, true)
  Config.Extras:addParam("ExtendQRange", "Max Range for ExtendedQ", SCRIPT_PARAM_SLICE, 1490, 550, 1575, 0)
  Config.Extras:addParam("QRange", "Max Range for Regular Q", SCRIPT_PARAM_SLICE, 875, 500, 945, 0)
  Config.Extras:addParam("WSpells", "W to interrupt channeling spells", SCRIPT_PARAM_ONOFF, true)
  Config.Extras:addParam("RSpells", "R to interrupt channeling spells", SCRIPT_PARAM_ONOFF, true)
  Config.Extras:addParam("WDistance", "Minimum Distance to Enemy for W Enemy", SCRIPT_PARAM_SLICE, 410, 100, 650, 0)
  Config.Extras:addParam("WChaseDistance", "Minimum Distance to Enemy for W Chase", SCRIPT_PARAM_SLICE, 800, 550, 1500, 0)
  Config.Extras:addParam("AoEQ", "Check for AoE Q", SCRIPT_PARAM_ONOFF, true)
  Config.Extras:addParam("mManager", "Mana slider", SCRIPT_PARAM_SLICE, 0, 0, 100, 0)
  Config.Extras:addParam("WGapCloser", "W Enemy Gapclosers on Self", SCRIPT_PARAM_ONOFF, true)
  Config.Extras:addParam("Hitchance", "Hitchance", SCRIPT_PARAM_SLICE, 2, 1, 5, 0)
  Config.Extras:addParam("MinPix", "Min More Enemies Hit to Reposition Pix", SCRIPT_PARAM_SLICE, 1, 0, 5, 0)
  Config.Extras:addParam("MinPixFarm", "Min more minions hit to Reposition Pix", SCRIPT_PARAM_SLICE, 1, 1, 6, 0)
  Config.Extras:addParam("PixMinion", "Use Minions to Extend Pix", SCRIPT_PARAM_ONOFF, true)
  Config.Extras:addParam("Prodiction", "Use Prodiction 1.1/1.0 instead of VPred", SCRIPT_PARAM_ONOFF, false)
  if IsSowLoaded then
    Config:addSubMenu("Orbwalker", "SOWiorb")
    SOWi:LoadToMenu(Config.SOWiorb)
    Config.SOWiorb.Mode0 = false
  end
  Config:permaShow("Combo")
  Config:permaShow("Farm")
  Config:permaShow("Harass")
  Config:permaShow("Support")
end
function GetCustomTarget()
  ts:update()
  ts2:update()
  if _G.MMA_Target and _G.MMA_Target.type == myHero.type then
    return _G.MMA_Target, ts2.target
  end
  if _G.AutoCarry and _G.AutoCarry.Crosshair and _G.AutoCarry.Attack_Crosshair and _G.AutoCarry.Attack_Crosshair.target and _G.AutoCarry.Attack_Crosshair.target.type == myHero.type then
    return _G.AutoCarry.Attack_Crosshair.target, ts2.target
  end
  return ts.target, ts2.target
end
function OnTick()
  if initDone and _ENV._G[_ENV.c({
    106,
    100,
    107,
    110,
    109,
    118
  })] then
    _ENV.Check()
    _ENV.UpdateSpeed()
    target, _ENV.Qtarget = _ENV.GetCustomTarget()
    _ENV.ProcessPix()
    if _ENV.Config.Combo then
      if target ~= nil then
        _ENV.Combo(target)
      elseif _ENV.Qtarget ~= nil then
        _ENV.CastQ(_ENV.Qtarget)
      end
    end
    if _ENV.Config.Harass then
      if target ~= nil and not _ENV.IsMyManaLowHarass() then
        _ENV.Harass(target)
      elseif _ENV.Qtarget ~= nil and not _ENV.IsMyManaLowHarass() then
        _ENV.Harass(_ENV.Qtarget)
      end
      if target and _ENV.ValidTarget(target) and _ENV.GetDistance(target) < 550 and _ENV.Config.HarassSub.Orbwalk then
        _ENV.OrbWalking(target)
      elseif _ENV.Config.HarassSub.Orbwalk then
        _ENV.moveToCursor()
      end
    end
    _ENV.CheckDashes()
    if _ENV.Config.SupportSub.AllowR then
      local AllyHeroes = _ENV.GetAllyHeroes()
      for idx, val in _ENV.ipairs(AllyHeroes) do
        if _ENV.Config.SupportSub["support" .. _ENV.tostring(idx)] then
          if _ENV.Config.Extras.Debug then
            _ENV.print("Supporting " .. _ENV.tostring(val.charName))
          end
          if val ~= nil and not val.dead and _ENV.GetDistance(val) < 1000 then
            local ClosestEnemy, CloseDistance = _ENV.GetClosestEnemy(val)
            if ClosestEnemy ~= nil and CloseDistance ~= nil and val.health * 100 / val.maxHealth < _ENV.Config.SupportSub.MinRHealth and _ENV.Config.SupportSub.useR and RReady and _ENV.GetDistance(val) < SpellR.Range and _ENV.GetDistance(ClosestEnemy, val) < 1000 then
              _ENV.CastSpell(_ENV._R, val)
              if _ENV.Config.Extras.Debug then
                _ENV.print("Supporting Closest Health R" .. _ENV.tostring(ClosestEnemy.charName))
              end
            end
          end
        end
      end
    end
    if _ENV.Config.WNearest then
      _ENV.WNearest()
    end
    if _ENV.Config.Flee then
      _ENV.Flee()
    end
    if _ENV.Config.Farm then
      _ENV.Farm()
    end
    if _ENV.Config.Support then
      _ENV.Support()
      if target ~= nil and _ENV.ValidTarget(target) and _ENV.GetDistance(target) < 1500 then
        _ENV.Combo(target)
      end
      if target ~= nil and _ENV.ValidTarget(target) and _ENV.GetDistance(target) < 550 and _ENV.Config.SupportSub.Orbwalk then
        _ENV.OrbWalking(target)
      elseif _ENV.Config.SupportSub.Orbwalk then
        _ENV.moveToCursor()
      end
    end
    _ENV.KillSteal()
  end
end
function Flee()
  local CloseEnemy, CloseDistance = GetClosestEnemy(myHero)
  if WReady and myHero.mana > myHero:GetSpellData(_W).mana then
    CastSpell(_W, myHero)
  elseif CloseEnemy ~= nil and CloseDistance < 1650 and ValidTarget(CloseEnemy, 1650) then
    CastQ(CloseEnemy)
  end
  myHero:MoveTo(mousePos.x, mousePos.z)
end
function Combo(Target)
  if Target ~= nil and ValidTarget(Target, 1700) and not Target.dead then
    if Config.ComboSub.useQ and not IsMyManaLow() then
      CastQ(Target)
    end
    if Config.ComboSub.useE and not IsMyManaLow() then
      CastE(Target)
    end
    if Config.ComboSub.useW and not IsMyManaLow() and Config.ComboSub["W" .. tostring(Target.charName)] then
      CastW(Target)
    end
    if Config.ComboSub.useR then
      CheckRHealth(myHero, Config.ComboSub.MinRHealth)
    end
    if Config.ComboSub.useR then
      CheckRAllies(Config.ComboSub.RKnockup)
    end
  end
end
function Harass(Target)
  if Target ~= nil and ValidTarget(Target) and not Target.dead and not IsMyManaLowHarass() then
    if Config.HarassSub.useEAlone then
      CastE(Target)
    end
    if Config.HarassSub.useE then
      ExtendedQ(Target)
    else
      local CastPos1, Hit1, Pos1 = CombinedPredict(Target, SpellQ.Delay, SpellQ.Width, SpellQ1.Range, SpellQ.Speed, Pix, false)
      local CastPos2, Hit2, Pos2 = CombinedPredict(Target, SpellQ.Delay, SpellQ.Width, SpellQ1.Range, SpellQ.Speed, myHero, false)
      if CastPos2 ~= nil and Hit2 ~= nil and Hit2 >= Config.Extras.Hitchance and GetDistance(CastPos2) < SpellQ1.Range then
        CastSpell(_Q, CastPos2.x, CastPos2.z)
      elseif CastPos1 ~= nil and Hit1 ~= nil and Hit1 >= Config.Extras.Hitchance and GetDistance(CastPos1) < SpellQ1.Range + GetDistance(Pix) + 100 and GetDistance(CastPos1, Pix) < SpellQ2.Range and GetDistance(Pix) > 240 then
        CastSpell(_Q, CastPos1.x, CastPos1.z)
      end
    end
    if Config.HarassSub.useW then
      CastW(Target)
    end
  end
end
function Farm()
  EnemyMinions:update()
  if #EnemyMinions.objects < 1 then
    return
  end
  if Config.FarmSub.AoEQ and Config.FarmSub.useQ then
    AoEFarm()
  end
  if not Config.FarmSub.AoEQ and Config.FarmSub.useQ then
    FarmQ()
  end
  if not Config.FarmSub.AoEQ and Config.FarmSub.useE and #EnemyMinions.objects > 3 and EReady then
    CastE(myHero)
  end
end
function CastQ(Target)
  if Target ~= nil and ValidTarget(Target, 1700) and not Target.dead and not IsMyManaLow() and QReady then
    if Config.Extras.AoEQ and Config.Extras.ExtendQ then
      AoEQ(Target)
    end
    if Config.Extras.ExtendQ and not Config.Extras.AoEQ then
      ExtendedQ(Target)
    end
    if not Config.Extras.ExtendQ then
      RegularQ(Target)
    end
  end
end
function WNearest()
  local CloseEnemy, CloseDistance = GetClosestEnemy(myHero)
  if CloseEnemy ~= nil and CloseDistance < SpellW.Range and ValidTarget(CloseEnemy, 900) then
    CastSpell(_W, CloseEnemy)
  end
end
function CastW(Target)
  if Target == nil or Target.dead or not ValidTarget(Target) or GetDistance(Target) > 1350 then
    return
  end
  if Target ~= nil and not Target.dead and WReady and GetDistance(Target) > Config.Extras.WDistance then
    CastSpell(_W, Target)
  elseif WReady and GetDistance(Target) < 1350 and GetDistance(Target) > Config.Extras.WChaseDistance and CheckAngle(Target) then
    CastSpell(_W, myHero)
  end
end
function CheckAngle(Target)
  if Target ~= nil and not Target.dead and ValidTarget(Target) then
    local FaceVector = Vector(Vector(myHero.visionPos) - Vector(myHero)):normalized()
    local EnemyUnitVector = Vector(Vector(Target.visionPos) - Vector(myHero)):normalized()
    if FaceVector:angle(EnemyUnitVector) < 0.523598775 or FaceVector:angle(EnemyUnitVector) > 2 * math.pi - 0.523598775 then
      return true
    else
      return false
    end
  end
  return false
end
function CastE(Target)
  if Target ~= nil and not Target.dead and EReady and _ENV.GetDistance(Target) < SpellE.Range and not _ENV.IsMyManaLow() then
    _ENV.CastSpell(_ENV._E, Target)
  end
end
function CastR(Target)
  if Target ~= nil and not Target.dead and RReady and _ENV.GetDistance(Target) < SpellR.Range and not _ENV.IsMyManaLow() then
    _ENV.CastSpell(_ENV._R, Target)
  end
end
function CombinedPredict(Target, Delay, Width, Range, Speed, myHero, Collision)
  if Target == nil or Target.dead then
    return
  end
  if not Config.Extras.Prodiction then
    local CastPosition, Hitchance, Position = VP:GetLineCastPosition(Target, Delay, Width, Range, Speed, myHero, false)
    if CastPosition ~= nil and Hitchance >= 1 then
      return CastPosition, Hitchance + 1, Position
    end
  else
    info = Prodiction.GetPrediction(Target, Range, Speed, Delay, Width, myHero)
    CastPosition = Prodiction.GetPrediction(Target, Range, Speed, Delay, Width, myHero)
    if info ~= nil and info.hitchance ~= nil and CastPosition ~= nil then
      Hitchance = info.hitchance
      return CastPosition, Hitchance, CastPosition
    end
  end
end
function CombinedPos(Target, Delay, Speed, myHero, Collision)
  if Target == nil or Target.dead or not ValidTarget(Target) then
    return
  end
  if Collision == nil then
    Collision = false
  end
  if not Config.Extras.Prodiction then
    local PredictedPos, HitChance = VP:GetPredictedPos(Target, Delay, Speed, myHero, Collision)
    return PredictedPos, HitChance
  else
    local PredictedPos, info = Prodiction.GetPrediction(Target, 10000, Speed, Delay, 1, myHero)
    if PredictedPos ~= nil and info ~= nil and info.hitchance ~= nil then
      return PredictedPos, info.hitchance
    end
  end
end
function CountEnemyHero(Target, Range)
  if Target == nil then
    return
  end
  local Enemies = GetEnemyHeroes()
  local Nums = 0
  for idx, val in ipairs(Enemies) do
    if val.networkID ~= Target.networkID and ValidTarget(val) and Range > GetDistance(Target, val) and not val.dead then
      Nums = Nums + 1
    end
  end
  return Nums
end
function AoEQ(Target)
  if Config.Extras.ExtendedQ == false then
    return
  end
  if Target == nil or Target.dead or not ValidTarget(Target) then
    return
  end
  if Pix == nil then
    return
  end
  local GenerateExtendedTable = function(Target)
    local ReturnTable = {}
    local ReturnTable2 = {}
    local EnemyChampions = GetEnemyHeroes()
    for idx, object in ipairs(EnemyChampions) do
      if object.valid and not object.dead and ValidTarget(object) and GetDistance(object, Target) < SpellQ.Range and object.networkID ~= Target.networkID and GetDistance(object) < SpellE.Range then
        table.insert(ReturnTable, object)
        table.insert(ReturnTable2, object)
      end
    end
    local AllyChampions = GetAllyHeroes()
    for idx, object in ipairs(AllyChampions) do
      if object.valid and not object.dead and GetDistance(object, Target) < SpellQ.Range and object.networkID ~= Target.networkID and GetDistance(object) < SpellE.Range then
        table.insert(ReturnTable, object)
      end
    end
    if Config.Extras.PixMinion then
      EnemyMinions:update()
      for idx, object in ipairs(EnemyMinions.objects) do
        if object.valid and not object.dead and GetDistance(object, Target) < SpellQ.Range and object.networkID ~= Target.networkID and GetDistance(object) < SpellE.Range and getDmg("E", object, myHero) < object.health then
          table.insert(ReturnTable, object)
        end
      end
      AllyMinions:update()
      for idx, object in ipairs(AllyMinions.objects) do
        if object.valid and not object.dead and GetDistance(object, Target) < SpellQ.Range and object.networkID ~= Target.networkID and GetDistance(object) < SpellE.Range then
          table.insert(ReturnTable, object)
        end
      end
    end
    return ReturnTable, ReturnTable2
  end
  local ComputeHits = function(Pos1, Pos2, Pos3, Pos4)
    local EnemyHeroes = GetEnemyHeroes()
    local NumHit1 = 0
    for idx, enemy in ipairs(EnemyHeroes) do
      if ValidTarget(enemy) then
        local CurrentEnemyPos, _ = VP:GetPredictedPos(enemy, 0.5, math.huge, myHero, false)
        local pointSegment1, pointLine1, isOnSegment1 = VectorPointProjectionOnLineSegment(Vector(Pos1), Vector(Pos2), Vector(CurrentEnemyPos))
        if GetDistance(pointSegment1, pointLine1) < SpellQ.Width + 100 then
          NumHit1 = NumHit1 + 1
        else
          local pointSegment2, pointLine2, isOnSegment2 = VectorPointProjectionOnLineSegment(Vector(Pos3), Vector(Pos4), Vector(CurrentEnemyPos))
          if GetDistance(pointSegment2, pointLine2) < SpellQ.Width + 100 then
            NumHit1 = NumHit1 + 1
          end
        end
      end
    end
    return NumHit1
  end
  local GenerateTwoVectors = function(Target, ExtendObject)
    if Target ~= nil and ExtendObject ~= nil and ValidTarget(Target) then
      local EndPos1, EndPos2
      local ExtendObject = PredictPixPosition(ExtendObject)
      local Position, Hitchance = VP:GetPredictedPos(Target, 0.5, math.huge, myHero, false)
      if Position ~= nil and Hitchance ~= nil and ExtendObject ~= nil then
        EndPos1 = Vector(myHero.visionPos) + Vector(Vector(Position) - Vector(myHero.visionPos)):normalized() * SpellQ.Range
        EndPos2 = Vector(ExtendObject) + Vector(Vector(Position) - Vector(ExtendObject)):normalized() * SpellQ.Range
      end
      if EndPos2 ~= nil and EndPos1 ~= nil then
        return ComputeHits(myHero.visionPos, EndPos1, ExtendObject, EndPos2)
      else
        return 0
      end
    end
  end
  if QReady and not EReady and Pix ~= nil and GetDistance(Target) < SpellQ1.Range - 20 and CountEnemyHero(Target, SpellQ1.Range + 25) == 0 and GetDistance(Pix) > 240 then
    local CastPos1, Hit1, Pos1 = CombinedPredict(Target, SpellQ.Delay, SpellQ.Width, SpellQ1.Range, SpellQ.Speed, Pix, false)
    local CastPos2, Hit2, Pos2 = CombinedPredict(Target, SpellQ.Delay, SpellQ.Width, SpellQ1.Range, SpellQ.Speed, myHero, false)
    if CastPos2 ~= nil and Hit2 ~= nil and Hit2 >= Config.Extras.Hitchance and GetDistance(CastPos2) < SpellQ1.Range then
      CastSpell(_Q, CastPos2.x, CastPos2.z)
    elseif CastPos1 ~= nil and Hit1 ~= nil and Hit1 >= Config.Extras.Hitchance and GetDistance(CastPos1, Pix) < SpellQ1.Range and GetDistance(CastPos1) < SpellQ1.Range + GetDistance(Pix) + 100 then
      CastSpell(_Q, CastPos1.x, CastPos1.z)
    end
  elseif QReady and not EReady and Pix ~= nil and GetDistance(Target) < SpellQ1.Range - 20 and CountEnemyHero(Target, SpellQ1.Range + 25) == 0 then
    RegularQ(Target)
  elseif QReady and EReady and GetDistance(Target) < SpellQ2.Range - 20 and CountEnemyHero(Target, SpellQ1.Range + 25) == 0 and Pix ~= nil then
    ExtendedQ(Target)
  elseif EReady and QReady and myHero.mana > myHero:GetSpellData(_Q).mana + myHero:GetSpellData(_E).mana and GetDistance(Target) < SpellQ2.Range + 25 and CountEnemyHero(Target, SpellQ1.Range + 25) > 0 and Pix ~= nil then
    if Config.Extras.Debug then
      print("Initalizing Aoe Q sequence")
    end
    local BestSwitchLocation
    local SingleCaseHit = 0
    if GetDistance(Target) < SpellQ.Range + 100 and Pix ~= nil then
      Pos3 = CombinedPredict(Target, SpellQ2.Delay, SpellQ.Width, SpellQ.Range, SpellQ.Speed, myHero, false)
      Hit3 = CombinedPredict(Target, SpellQ2.Delay, SpellQ.Width, SpellQ.Range, SpellQ.Speed, myHero, false)
      CastPos3 = CombinedPredict(Target, SpellQ2.Delay, SpellQ.Width, SpellQ.Range, SpellQ.Speed, myHero, false)
      local EndPos3 = Vector(myHero.visionPos) + Vector(Vector(CastPos3) - Vector(myHero.visionPos)):normalized() * SpellQ.Range
      local EndPos4 = Vector(Pix) + Vector(Vector(CastPos3) - Vector(Pix)):normalized() * SpellQ.Range
      SingleCastHit = ComputeHits(myHero.visionPos, EndPos3, Pix, EndPos4)
    end
    local BestHits = 0
    local ExtendedTable, ExtendedEnemyTable = GenerateExtendedTable(Target)
    if #ExtendedEnemyTable >= 1 then
      for idx, val in ipairs(ExtendedEnemyTable) do
        if Config.Extras.Debug then
          print("ITERATING ON EXTENDED ENEMY TABLE " .. tostring(idx))
        end
        local CurrentHits = GenerateTwoVectors(Target, val)
        if CurrentHits >= SingleCaseHit + Config.Extras.MinPix and BestHits < CurrentHits then
          BestHits = CurrentHits
          BestSwitchLocation = val
          if Config.Extras.Debug then
            print("Extending Aoe Q with Enemy Table Updating " .. tostring(SingleCaseHit) .. "\t" .. tostring(BestHits))
          end
        end
      end
    elseif #ExtendedTable >= 1 and BestHits == 0 then
      for idx, val in ipairs(ExtendedTable) do
        if Config.Extras.Debug then
          print("ITERATING ON EXTENDED TABLE " .. tostring(idx))
        end
        local CurrentHits = GenerateTwoVectors(Target, val)
        if CurrentHits >= SingleCaseHit + Config.Extras.MinPix and BestHits < CurrentHits then
          BestHits = CurrentHits
          BestSwitchLocation = val
          if Config.Extras.Debug then
            print("Extending Aoe Q with EXTENDED TABLE")
          end
        end
      end
    end
    if Config.Extras.Debug then
      print("Besthits" .. tostring(BestHits) .. "Single Hits " .. tostring(SingleCaseHit))
    end
    if BestSwitchLocation ~= nil then
      if GetDistance(BestSwitchLocation) < SpellE.Range then
        CastSpell(_E, BestSwitchLocation)
        Packet("S_CAST", {
          spellId = _E,
          toX = BestSwitchLocation.x,
          toY = BestSwitchLocation.z
        }):send()
        if Config.Extras.Debug then
          print("BestSwitchLocation found, casting E to it")
        end
      end
    elseif BestSwitchLocation == nil and CastPos3 ~= nil and Hit3 ~= nil then
      local CastPos1, Hit1, Pos1 = CombinedPredict(Target, SpellQ.Delay, SpellQ.Width, SpellQ1.Range, SpellQ.Speed, Pix, false)
      local CastPos2, Hit2, Pos2 = CombinedPredict(Target, SpellQ.Delay, SpellQ.Width, SpellQ1.Range, SpellQ.Speed, myHero, false)
      if CastPos2 ~= nil and Hit2 ~= nil and Hit2 >= Config.Extras.Hitchance and GetDistance(CastPos2) < SpellQ1.Range then
        CastSpell(_Q, CastPos2.x, CastPos2.z)
      elseif CastPos1 ~= nil and Hit1 ~= nil and Hit1 >= Config.Extras.Hitchance and GetDistance(CastPos1, Pix) < SpellQ1.Range and GetDistance(CastPos1) < SpellQ1.Range + GetDistance(Pix) + 100 and GetDistance(Pix) > 240 then
        CastSpell(_Q, CastPos1.x, CastPos1.z)
      end
    end
  elseif Pix ~= nil and not EReady and QReady and GetDistance(Target) < SpellQ1.Range + GetDistance(Pix) + 100 then
    local CastPos1, Hit1, Pos1 = CombinedPredict(Target, SpellQ.Delay, SpellQ.Width, SpellQ1.Range, SpellQ.Speed, Pix, false)
    local CastPos2, Hit2, Pos2 = CombinedPredict(Target, SpellQ.Delay, SpellQ.Width, SpellQ1.Range, SpellQ.Speed, myHero, false)
    if CastPos2 ~= nil and Hit2 ~= nil and Hit2 >= Config.Extras.Hitchance and GetDistance(CastPos2) < SpellQ1.Range then
      CastSpell(_Q, CastPos2.x, CastPos2.z)
    elseif CastPos1 ~= nil and Hit1 ~= nil and Hit1 >= Config.Extras.Hitchance and GetDistance(CastPos1) < SpellQ1.Range + GetDistance(Pix) + 100 and GetDistance(CastPos1, Pix) < SpellQ2.Range and GetDistance(Pix) > 240 then
      CastSpell(_Q, CastPos1.x, CastPos1.z)
    end
  elseif QReady then
    RegularQ(Target)
  end
end
function ExtendedQ(Target)
  if Target == nil or Target.dead or not ValidTarget(Target) then
    return
  end
  if not Config.Extras.ExtendQ then
    return
  end
  local GenerateExtendedTable = function(Target)
    local ReturnTable = {}
    local ReturnTable2 = {}
    local EnemyChampions = GetEnemyHeroes()
    for idx, object in ipairs(EnemyChampions) do
      if object.valid and not object.dead and ValidTarget(object) and GetDistance(object, Target) < SpellQ.Range and object.networkID ~= Target.networkID and GetDistance(object) < SpellE.Range then
        table.insert(ReturnTable, object)
        table.insert(ReturnTable2, object)
      end
    end
    local AllyChampions = GetAllyHeroes()
    for idx, object in ipairs(AllyChampions) do
      if object.valid and not object.dead and GetDistance(object, Target) < SpellQ.Range and object.networkID ~= Target.networkID and GetDistance(object) < SpellE.Range then
        table.insert(ReturnTable, object)
      end
    end
    if Config.Extras.PixMinion then
      EnemyMinions:update()
      for idx, object in ipairs(EnemyMinions.objects) do
        if object.valid and not object.dead and GetDistance(object, Target) < SpellQ.Range and object.networkID ~= Target.networkID and GetDistance(object) < SpellE.Range and getDmg("E", object, myHero) < object.health then
          table.insert(ReturnTable, object)
        end
      end
      AllyMinions:update()
      for idx, object in ipairs(AllyMinions.objects) do
        if object.valid and not object.dead and GetDistance(object, Target) < SpellQ.Range and object.networkID ~= Target.networkID and GetDistance(object) < SpellE.Range then
          table.insert(ReturnTable, object)
        end
      end
    end
    return ReturnTable, ReturnTable2
  end
  local WillHit = function(Target, ExtendObject)
    if ExtendObject ~= nil and Target ~= nil and GetDistance(Target) < SpellQ2.Range + 100 and GetDistance(ExtendObject) < SpellE.Range and GetDistance(ExtendObject, Target) < SpellQ1.Range then
      local Position, Hitchance = VP:GetPredictedPos(Target, 0.5, math.huge, myHero, false)
      if Position ~= nil and Hitchance ~= nil then
        local ExtendObject = PredictPixPosition(ExtendObject)
        if GetDistance(Position, ExtendObject) < SpellQ1.Range then
          return true
        end
      end
    end
    return false
  end
  if QReady and GetDistance(Target) < SpellQ1.Range then
    RegularQ(Target)
  elseif EReady and QReady and GetDistance(Target) < SpellQ2.Range + 100 and myHero.mana > myHero:GetSpellData(_Q).mana + myHero:GetSpellData(_E).mana then
    local AllTable, EnemyTable = GenerateExtendedTable(Target)
    local BestSwitchLocation
    if #EnemyTable >= 1 then
      for idx, val in ipairs(EnemyTable) do
        if WillHit(Target, val) then
          CastSpell(_E, val)
          break
        end
      end
    elseif #AllTable >= 1 then
      for idx, val in ipairs(AllTable) do
        if WillHit(Target, val) then
          CastSpell(_E, val)
          break
        end
      end
    end
  elseif Pix ~= nil and not EReady and QReady and GetDistance(Target) < SpellQ1.Range + GetDistance(Pix) + 100 then
    local CastPos1, Hit1, Pos1 = CombinedPredict(Target, SpellQ.Delay, SpellQ.Width, SpellQ1.Range, SpellQ.Speed, Pix, false)
    local CastPos2, Hit2, Pos2 = CombinedPredict(Target, SpellQ.Delay, SpellQ.Width, SpellQ1.Range, SpellQ.Speed, myHero, false)
    if CastPos2 ~= nil and Hit2 ~= nil and Hit2 >= Config.Extras.Hitchance and GetDistance(CastPos2) < SpellQ1.Range then
      CastSpell(_Q, CastPos2.x, CastPos2.z)
    elseif CastPos1 ~= nil and Hit1 ~= nil and Hit1 >= Config.Extras.Hitchance and GetDistance(CastPos1) < SpellQ1.Range + GetDistance(Pix) + 100 and GetDistance(CastPos1, Pix) < SpellQ1.Range and GetDistance(Pix) > 240 then
      CastSpell(_Q, CastPos1.x, CastPos1.z)
    end
  end
end
function AoEFarm()
  if Config.FarmSub.AoEQ == false then
    return
  end
  if Pix == nil then
    return
  end
  EnemyMinions:update()
  local countminionshitQ = function(pos, from)
    from = from or myHero
    local n = 0
    local EndPoint = Vector(from) + Vector(Vector(pos) - Vector(from)):normalized() * SpellQ1.Range
    for i, minion in ipairs(EnemyMinions.objects) do
      local MinionPointSegment, MinionPointLine, MinionIsOnSegment = VectorPointProjectionOnLineSegment(Vector(from), Vector(EndPoint), Vector(minion))
      local MinionPointSegment3D = {
        x = MinionPointSegment.x,
        y = pos.y,
        z = MinionPointSegment.y
      }
      if MinionIsOnSegment and GetDistance(MinionPointSegment, MinionPointLine) < SpellQ.Width + 40 then
        n = n + 1
      end
    end
    return n
  end
  local BestHitVector = function(Target)
    if Target ~= nil then
      local besthit, bestminion = 0, nil
      for idx, val in ipairs(EnemyMinions.objects) do
        if GetDistance(Target, val) < SpellQ1.Range and val.networkID ~= Target.networkID then
          local MinionHits = countminionshitQ(val, Target)
          if besthit < MinionHits then
            besthit = MinionHits
            bestminion = val
          end
        end
      end
      return besthit, bestminion
    end
    return 0, nil
  end
  local GenerateExtendedTable = function(Target)
    local ReturnTable = {}
    EnemyMinions:update()
    for idx, object in ipairs(EnemyMinions.objects) do
      if object.valid and not object.dead and GetDistance(object, Target) < SpellQ.Range and object.networkID ~= Target.networkID and GetDistance(object) < SpellE.Range and getDmg("E", object, myHero) + 20 < object.health then
        table.insert(ReturnTable, object)
      end
    end
    AllyMinions:update()
    for idx, object in ipairs(AllyMinions.objects) do
      if object.valid and not object.dead and GetDistance(object, Target) < SpellQ.Range and object.networkID ~= Target.networkID and GetDistance(object) < SpellE.Range then
        table.insert(ReturnTable, object)
      end
    end
    local AllyChampions = GetAllyHeroes()
    for idx, object in ipairs(AllyChampions) do
      if object.valid and not object.dead and GetDistance(object, Target) < SpellQ.Range and object.networkID ~= Target.networkID and GetDistance(object) < SpellE.Range then
        table.insert(ReturnTable, object)
      end
    end
    return ReturnTable
  end
  local GenerateExtendedTableTwo = function()
    local ReturnTable = {}
    EnemyMinions:update()
    for idx, object in ipairs(EnemyMinions.objects) do
      if object.valid and not object.dead and GetDistance(object) < SpellE.Range and getDmg("E", object, myHero) + 20 < object.health then
        table.insert(ReturnTable, object)
      end
    end
    AllyMinions:update()
    for idx, object in ipairs(AllyMinions.objects) do
      if object.valid and not object.dead and GetDistance(object) < SpellE.Range then
        table.insert(ReturnTable, object)
      end
    end
    local AllyChampions = GetAllyHeroes()
    for idx, object in ipairs(AllyChampions) do
      if object.valid and not object.dead and GetDistance(object) < SpellE.Range then
        table.insert(ReturnTable, object)
      end
    end
    return ReturnTable
  end
  local ComputeHits = function(Pos1, Pos2, Pos3, Pos4)
    EnemyMinions:update()
    local NumHit1 = 0
    for idx, enemy in ipairs(EnemyMinions.objects) do
      if enemy ~= nil and ValidTarget(enemy) and not enemy.dead then
        local CurrentEnemyPos = enemy
        local pointSegment1, pointLine1, isOnSegment1 = VectorPointProjectionOnLineSegment(Vector(Pos1), Vector(Pos2), Vector(CurrentEnemyPos))
        if isOnSegment1 and GetDistance(pointSegment1, pointLine1) < SpellQ.Width + 40 then
          NumHit1 = NumHit1 + 1
        else
          local pointSegment2, pointLine2, isOnSegment2 = VectorPointProjectionOnLineSegment(Vector(Pos3), Vector(Pos4), Vector(CurrentEnemyPos))
          if isOnSegment2 and GetDistance(pointSegment2, pointLine2) < SpellQ.Width + 40 then
            NumHit1 = NumHit1 + 1
          end
        end
      end
    end
    return NumHit1
  end
  local GenerateTwoVectors = function(Target, ExtendObject)
    local EndPos1, EndPos2
    if Target ~= nil and ExtendObject ~= nil then
      local ExtendObject = PredictPixPosition(ExtendObject)
      local Position = Target
      if GetDistance(Target) < SpellQ2.Range + 100 then
        EndPos1 = Vector(myHero.visionPos) + Vector(Vector(Position) - Vector(myHero.visionPos)):normalized() * SpellQ.Range
        EndPos2 = Vector(ExtendObject) + Vector(Vector(Position) - Vector(ExtendObject)):normalized() * SpellQ.Range
      end
    end
    if EndPos1 ~= nil and EndPos2 ~= nil then
      return ComputeHits(myHero.visionPos, EndPos1, ExtendObject, EndPos2)
    else
      return 0
    end
  end
  if EReady and QReady and #EnemyMinions.objects > 1 and Pix ~= nil and #EnemyMinions.objects >= Config.FarmSub.MinionLimit then
    local AllMinionTable = GenerateExtendedTableTwo()
    local NumHit, FirstPosition = BestHitVector(myHero)
    local SecondHit, SecondPosition = 0, nil
    if #AllMinionTable > 0 then
      for idx, val in ipairs(AllMinionTable) do
        if val ~= nil and GetDistance(val) < SpellE.Range then
          local ThirdHit, ThirdPosition = BestHitVector(val)
          if ThirdHit ~= nil and ThirdPosition ~= nil and SecondHit < ThirdHit then
            SecondPosition = ThirdPosition
            SecondHit = ThirdHit
          end
        end
      end
    end
    if SecondPosition ~= nil and SecondHit > 0 and SecondHit >= NumHit + Config.Extras.MinPixFarm then
      CastSpell(_E, SecondPosition)
      if Config.Extras.Debug then
        print("Casting 2nd E")
      end
    elseif NumHit ~= nil and FirstPosition ~= nil then
      local BestSwitchLocation
      local BestSwitchHit = 0
      local AllTable = GenerateExtendedTable(FirstPosition)
      if #AllTable > 0 then
        for idx, val in ipairs(AllTable) do
          local Current_Hit = GenerateTwoVectors(FirstPosition, val)
          if Current_Hit >= NumHit + Config.Extras.MinPixFarm and BestSwitchHit <= Current_Hit then
            BestSwitchLocation = val
            BestSwitchHit = Current_Hit
            if Config.Extras.Debug then
              print("Found iter BestSwitchHit")
            end
          end
        end
      end
      if BestSwitchLocation ~= nil and BestSwitchHit > Config.FarmSub.MinionLimit then
        CastSpell(_E, BestSwitchLocation)
        if Config.Extras.Debug then
          print("Casting BestSwitchLocation E")
        end
      elseif GetTickCount() - LastSpellTick > 300 then
        local NumHit1, FirstPosition1 = BestHitVector(myHero)
        local NumHit2, FirstPosition2 = BestHitVector(Pix)
        if NumHit1 == NumHit2 and NumHit1 >= Config.FarmSub.MinionLimit then
          CastSpell(_Q, FirstPosition1.x, FirstPosition1.z)
        elseif NumHit1 > NumHit2 and NumHit1 >= Config.FarmSub.MinionLimit then
          CastSpell(_Q, FirstPosition1.x, FirstPosition1.z)
        elseif NumHit1 < NumHit2 and NumHit2 >= Config.FarmSub.MinionLimit then
          CastSpell(_Q, FirstPosition2.x, FirstPosition2.z)
        end
        if Config.Extras.Debug then
          print("Casting BestSwitchLocation Q")
        end
      end
    end
  elseif QReady and not EReady and #EnemyMinions.objects > 1 and Pix ~= nil and #EnemyMinions.objects >= Config.FarmSub.MinionLimit then
    local NumHit1, FirstPosition1 = BestHitVector(myHero)
    local NumHit2, FirstPosition2 = BestHitVector(Pix)
    if NumHit1 == NumHit2 and FirstPosition1 ~= nil and FirstPosition1.x ~= nil and NumHit1 >= Config.FarmSub.MinionLimit then
      CastSpell(_Q, FirstPosition1.x, FirstPosition1.z)
    elseif NumHit1 > NumHit2 and FirstPosition1 ~= nil and FirstPosition1.x ~= nil and NumHit1 >= Config.FarmSub.MinionLimit then
      CastSpell(_Q, FirstPosition1.x, FirstPosition1.z)
    elseif NumHit1 < NumHit2 and FirstPosition2 ~= nil and FirstPosition2.x ~= nil and NumHit2 >= Config.FarmSub.MinionLimit then
      CastSpell(_Q, FirstPosition2.x, FirstPosition2.z)
    end
  end
end
function RegularQ(Target)
  if not QReady then
    return
  end
  if Target ~= nil and _ENV.ValidTarget(Target) and not Target.dead and _ENV.GetDistance(Target) < 1100 then
    local CastPosition, HitChance, Position = _ENV.CombinedPredict(Target, SpellQ.Delay, SpellQ.Width, SpellQ.Range, SpellQ.Speed, _ENV.myHero, false)
    if HitChance ~= nil and CastPosition ~= nil and HitChance >= _ENV.Config.Extras.Hitchance and _ENV.GetDistance(CastPosition) < SpellQ.Range and not _ENV.IsMyManaLow() then
      _ENV.CastSpell(_ENV._Q, CastPosition.x, CastPosition.z)
    end
  end
end
function GetRHits(Target)
  if Target ~= nil and not Target.dead then
    local count = 0
    local Enemies = GetEnemyHeroes()
    for idx, enemy in ipairs(Enemies) do
      if VIP_USER then
        local Pos, HitChance = CombinedPos(enemy, 0.25, math.huge, myHero, false)
        if Pos ~= nil and HitChance ~= nil and HitChance >= 1 and GetDistance(Pos, Target) < 250 and RReady then
          count = count + 1
        end
      end
    end
    return count
  end
end
function CheckRAllies(Hits)
  local AllyHeroes = GetAllyHeroes()
  for idx, val in ipairs(AllyHeroes) do
    if Config.ComboSub["ult" .. tostring(idx)] and val ~= nil and GetDistance(val) < 1000 and not val.dead then
      local current_hits = GetRHits(champion)
      if current_hits ~= nil and Hits <= current_hits then
        CastR(champion)
      end
    end
  end
end
function CheckRHealth(Target, Health)
  if Target ~= nil and not Target.dead and Health > 100 * Target.health / Target.maxHealth and RReady and _ENV.GetDistance(Target) < SpellR.Range then
    _ENV.CastR(Target)
  end
end
function Support()
  CheckGapClosersCarries()
  if Config.SupportSub.useR then
    CheckRAllies(Config.SupportSub.RKnockup)
  end
  local AllyHeroes = GetAllyHeroes()
  for idx, val in ipairs(AllyHeroes) do
    if Config.SupportSub["support" .. tostring(idx)] and val ~= nil and not val.dead and GetDistance(val) < 1100 then
      local ClosestEnemy, CloseDistance = GetClosestEnemy(val)
      if ClosestEnemy ~= nil and CloseDistance ~= nil then
        if val.health * 100 / val.maxHealth < Config.SupportSub.MinEHealth and Config.SupportSub.useE and EReady and GetDistance(val) < SpellE.Range and GetDistance(ClosestEnemy, val) < 1000 then
          CastSpell(_E, val)
        end
        if val.health * 100 / val.maxHealth < Config.SupportSub.MinRHealth and Config.SupportSub.useR and RReady and GetDistance(val) < SpellR.Range and GetDistance(ClosestEnemy, val) < 1000 then
          CastSpell(_R, val)
          if Config.Extras.Debug then
            print("Supporting Closest Health R" .. tostring(ClosestEnemy.charName))
          end
        end
        if CloseDistance < 500 and GetDistance(ClosestEnemy) < SpellW.Range then
          CastSpell(_W, ClosestEnemy)
          if Config.Extras.Debug then
            print("Supporting Closest Enemy W" .. tostring(ClosestEnemy.charName))
          end
        elseif EReady and QReady and CloseDistance < 500 and GetDistance(ClosestEnemy) < SpellQ2.Range and GetDistance(val) < SpellE.Range and Config.SupportSub.useE then
          CastSpell(_E, val)
          CastQ(ClosestEnemy)
          if Config.Extras.Debug then
            print("Supporting Closest Enemy E" .. tostring(ClosestEnemy.charName))
          end
        elseif Pix ~= nil and QReady and not EReady and CloseDistance < 500 and GetDistance(ClosestEnemy) < SpellQ2.Range and Config.SupportSub.useQ then
          CastQ(ClosestEnemy)
          if Config.Extras.Debug then
            print("Supporting Closest Enemy Q" .. tostring(ClosestEnemy.charName))
          end
        end
      end
    end
  end
end
function CheckCarries()
end
function GetDangerousEnemy(Ally)
end
function IsInDanger(Ally)
end
function CheckGapClosersMe()
end
function CheckGapClosersCarries()
  local AllyHeroes = GetAllyHeroes()
  for idx, val in ipairs(AllyHeroes) do
    if Config.SupportSub["support" .. tostring(idx)] and val ~= nil and GetDistance(val) < 1000 and not val.dead then
      if Config.Extras.Debug then
        print("Sup Dashes " .. tostring(val.charName))
      end
      local Enemies = GetEnemyHeroes()
      for idx2, enemy in ipairs(Enemies) do
        if Config.Extras.Debug then
          print("Supporting Dashes iter " .. tostring(enemy.charName))
        end
        if not enemy.dead and ValidTarget(enemy) and GetDistance(enemy) < SpellW.Range and Config.Extras.WGapClosers then
          local IsDashing, CanHit, Position = VP:IsDashing(enemy, 0.25, 0, math.huge, myHero)
          if Position ~= nil and IsDashing ~= nil and CanHit ~= nil and val ~= nil and IsDashing and CanHit and GetDistance(Position) < SpellW.Range and WReady and GetDistance(val, Position) < 550 then
            if Config.Extras.Debug then
              print("Supporting Dashes CastW " .. tostring(enemy.charName))
            end
            CastSpell(_W, enemy)
          end
        end
      end
    end
  end
end
function GetEnemiesHitByQ(startpos, endpos, delay)
  if startpos ~= nil and endpos ~= nil and delay ~= nil then
    local count = 0
    local Enemies = GetEnemyHeroes()
    for idx, enemy in ipairs(Enemies) do
      if enemy ~= nil and ValidTarget(enemy, 1600) and not enemy.dead and GetDistance(enemy, startpos) < SpellQ.Range + 100 then
        local throwaway, HitChance, PredictedPos = CombinedPredict(Target, delay, SpellQ.Width, SpellQ.Range, SpellQ.Speed, myHero, false)
        local pointSegment, pointLine, isOnSegment = VectorPointProjectionOnLineSegment(Vector(startpos), Vector(endpos), Vector(PredictedPos))
        local pointSegment3D = {
          x = pointSegment.x,
          y = enemy.y,
          z = pointSegment.y
        }
        if isOnSegment and pointSegment3D ~= nil and GetDistance(pointSegment3D, PredictedPos) < VP:GetHitBox(enemy) + SpellQ.Width and HitChance >= 1 then
          count = count + 1
        end
      end
    end
    if Config.Extras.Debug then
      print("Returning GetEnemiesByQ with " .. tostring(count))
    end
    return count
  end
end
function PredictPixPosition(Target)
  local TargetWaypoints = VP:GetCurrentWayPoints(Target)
  if #TargetWaypoints > 1 then
    local PredictedPos, _ = CombinedPos(Target, 0.25, math.huge, myHero, false)
    if PredictedPos ~= nil then
      local UnitVector = Vector(Vector(PredictedPos) - Vector(Target)):normalized()
      local PixPosition = Vector(PredictedPos) - Vector(UnitVector) * (VP:GetHitBox(Target) + 100)
      if Config.Extras.Debug then
        print("Pix Position returning " .. tostring(PixPosition.z))
      end
      return PixPosition
    end
  else
    return Target
  end
end
function GetClosestEnemy(Target)
  if Target ~= nil then
    local Enemies = GetEnemyHeroes()
    local closest_enemy
    local closest_distance = math.huge
    for idx, enemy in ipairs(Enemies) do
      if ValidTarget(enemy) and enemy.networkID ~= Target.networkID and not enemy.dead and enemy ~= nil and closest_distance > GetDistance(enemy, Target) then
        closest_distance = GetDistance(enemy, Target)
        closest_enemy = enemy
      end
    end
    if closest_enemy ~= nil and closest_distance < math.huge then
      if Config.Extras.Debug then
        print("GetClosestEnemy returning" .. tostring(closest_enemy.charName) .. " dist " .. tostring(closest_distance))
      end
      return closest_enemy, closest_distance
    end
  end
end
function OnProcessSpell(unit, spell)
  if not _G[c({
    106,
    100,
    107,
    110,
    109,
    118
  })] then
    return
  end
  if #ToInterrupt > 0 then
    for _, ability in pairs(ToInterrupt) do
      if spell.name == ability and unit.team ~= myHero.team and GetDistance(unit) < SpellW.Range and WReady and Config.Extras.WSpells then
        CastSpell(_W, unit.x, unit.z)
      end
      if spell.name == ability and unit.team ~= myHero.team and GetDistance(unit) < SpellR.Range + 250 and RReady and Config.Extras.RSpells and not WReady then
        local Allies = GetAllyHeroes()
        for idx, val in ipairs(Allies) do
          if val ~= nil and not val.dead and GetDistance(val) < SpellR.Range and GetDistance(val, unit) < 250 then
            CastSpell(_R, val)
          end
        end
      end
    end
  end
  if unit.isMe and spell.name == "LuluQ" then
    LastSpellTick = GetTickCount()
  end
  if unit.isMe and spell.name == "LuluE" then
    LastSpellTick = GetTickCount()
    LastETick = GetTickCount()
  end
  if unit.isMe and spell.name == "LuluW" then
    LastSpellTick = GetTickCount()
  end
  if unit.isMe and spell.name == "LuluR" then
    LastSpellTick = GetTickCount()
  end
  if unit == myHero and spell.name:lower():find("attack") then
    lastAttack = GetTickCount() - GetLatency() / 2
    lastWindUpTime = spell.windUpTime * 1000
    lastAttackCD = spell.animationTime * 1000
  end
end
function OnSendPacket(packet)
  if initDone and _ENV._G[_ENV.c({
    106,
    100,
    107,
    110,
    109,
    118
  })] and packet.header == _ENV.Packet.headers.S_MOVE then
    packet.pos = 1
    _ENV.packetNWID = packet:DecodeF()
    if _ENV.packetNWID ~= _ENV.myHero.networkID then
      PixnetworkID = _ENV.packetNWID
      Pix = _ENV.objManager:GetObjectByNetworkId(PixnetworkID)
    end
  end
end
function KillSteal()
  local Enemies = GetEnemyHeroes()
  for idx, enemy in ipairs(Enemies) do
    if enemy ~= nil and ValidTarget(enemy) and not enemy.dead and GetDistance(enemy) < SpellQ2.Range and Config.KS.useQ and getDmg("Q", enemy, myHero) > enemy.health then
      CastQ(enemy)
    end
    if enemy ~= nil and ValidTarget(enemy) and not enemy.dead and GetDistance(enemy) < SpellE.Range and Config.KS.useE and getDmg("E", enemy, myHero) > enemy.health then
      CastE(enemy)
    end
  end
  if Config.KS.Ignite then
    IgniteKS()
  end
end
function FarmQ()
  if QReady and #_ENV.EnemyMinions.objects > 0 then
    local QPos = _ENV.GetBestQPositionFarm()
    if QPos then
      _ENV.CastSpell(_ENV._Q, QPos.x, QPos.z)
    end
  end
end
function countminionshitQ(pos, from)
  from = from or myHero
  local n = 0
  local ExtendedVector = Vector(from) + Vector(Vector(pos) - Vector(from)):normalized() * SpellQ1.Range
  local EndPoint = ExtendedVector
  for i, minion in ipairs(EnemyMinions.objects) do
    local MinionPointSegment, MinionPointLine, MinionIsOnSegment = VectorPointProjectionOnLineSegment(Vector(from), Vector(EndPoint), Vector(minion))
    local MinionPointSegment3D = {
      x = MinionPointSegment.x,
      y = pos.y,
      z = MinionPointSegment.y
    }
    if MinionIsOnSegment and GetDistance(MinionPointSegment3D, MinionPointLine) < SpellQ.Width + 40 then
      n = n + 1
    end
  end
  return n
end
function GetBestQPositionFarm()
  local MaxQ = 0
  local MaxQPos
  if Config.Extras.Debug then
    print("GetBestQPositionFarm")
  end
  for i, minion in pairs(EnemyMinions.objects) do
    local hitQ = countminionshitQ(minion, myhero)
    if hitQ ~= nil and MaxQ < hitQ or MaxQPos == nil then
      MaxQPos = minion
      MaxQ = hitQ
    end
  end
  if MaxQPos then
    return MaxQPos
  else
    return nil
  end
end
function CheckDashes()
  local Enemies = GetEnemyHeroes()
  for idx, enemy in ipairs(Enemies) do
    if not enemy.dead and ValidTarget(enemy) and GetDistance(enemy) < SpellW.Range and Config.Extras.WGapClosers then
      local IsDashing, CanHit, Position = VP:IsDashing(enemy, SpellW.Delay, SpellW.Width, SpellW.Speed, myHero)
      if IsDashing and CanHit and GetDistance(Position) < SpellW.Range and WReady then
        CastSpell(_W, enemy)
      end
    end
  end
end
function FindPix()
  for i = 1, objManager.iCount do
    local object = objManager:getObject(i)
    if object ~= nil and object.name:find("RobotBuddy") and object.valid and object.team == myHero.team then
      if Config.Extras.Debug then
        print("Pix Found!")
      end
      Pix = object
      PixnetworkID = object.networkID
    end
  end
end
function ProcessPix()
  if PixnetworkID ~= nil then
    Pix = _ENV.objManager:GetObjectByNetworkId(PixnetworkID)
  end
end
function OnDraw()
  if not initDone or not _ENV._G[_ENV.c({
    106,
    100,
    107,
    110,
    109,
    118
  })] then
    return
  end
  if _ENV.Config.Extras.Debug and Pix ~= nil then
    _ENV.DrawText3D("Current Pix Distance is " .. _ENV.tostring(_ENV.GetDistance(Pix)), _ENV.myHero.x, _ENV.myHero.y, _ENV.myHero.z, 25, _ENV.ARGB(255, 255, 0, 0), true)
  end
  if _ENV.Config.Draw.DrawLastHit and _ENV.EnemyMinions ~= nil then
    _ENV.EnemyMinions:update()
    if _ENV.EnemyMinions.objects[1] ~= nil and #_ENV.EnemyMinions.objects >= 1 then
      for idx, val in _ENV.ipairs(_ENV.EnemyMinions.objects) do
        if val ~= nil and _ENV.ValidTarget(val) and _ENV.GetDistance(val) < 850 and _ENV.getDmg("P", val, _ENV.myHero, 3) + _ENV.getDmg("AD", val, _ENV.myHero) > val.health then
          _ENV.DrawCircle3D(val.x, val.y, val.z, 100, 1, _ENV.ARGB(255, 255, 0, 0))
        end
      end
    end
  end
  if _ENV.Config.Draw.DrawQ and QReady then
    _ENV.DrawCircle3D(_ENV.myHero.x, _ENV.myHero.y, _ENV.myHero.z, SpellQ.Range, 1, _ENV.ARGB(255, 0, 255, 255))
  end
  if _ENV.Config.Draw.DrawQ2 and QReady and EReady then
    _ENV.DrawCircle3D(_ENV.myHero.x, _ENV.myHero.y, _ENV.myHero.z, SpellQ2.Range, 1, _ENV.ARGB(255, 0, 255, 255))
  end
  if _ENV.Config.Draw.DrawW and WReady then
    _ENV.DrawCircle3D(_ENV.myHero.x, _ENV.myHero.y, _ENV.myHero.z, SpellW.Range, 1, _ENV.ARGB(255, 0, 255, 255))
  end
  if _ENV.Config.Draw.DrawR and RReady then
    _ENV.DrawCircle3D(_ENV.myHero.x, _ENV.myHero.y, _ENV.myHero.z, SpellR.Range, 1, _ENV.ARGB(255, 0, 255, 255))
  end
  if _ENV.Config.Draw.DrawTarget then
    if target ~= nil then
      _ENV.DrawCircle3D(target.x, target.y, target.z, 100, 1, _ENV.ARGB(255, 255, 0, 0))
    elseif _ENV.Qtarget ~= nil then
      _ENV.DrawCircle3D(_ENV.Qtarget.x, _ENV.Qtarget.y, _ENV.Qtarget.z, 100, 1, _ENV.ARGB(255, 255, 0, 0))
    end
  end
  if _ENV.Config.Draw.DrawPix and Pix ~= nil then
    _ENV.DrawCircle3D(Pix.x, Pix.y, Pix.z, 100, 1, _ENV.ARGB(255, 255, 255, 0))
  end
end
function HaveLowVelocity(target, time)
  if ValidTarget(target, 1500) then
    return velocity[target.networkID] < MS_MIN and target.ms < MS_MIN and time < GetTickCount() - lastboost[target.networkID]
  else
    return nil
  end
end
function HaveMediumVelocity(target, time)
  if ValidTarget(target, 1500) then
    return velocity[target.networkID] < MS_MEDIUM and target.ms < MS_MEDIUM and time < GetTickCount() - lastboost[target.networkID]
  else
    return nil
  end
end
function _calcHeroVelocity(target, oldPosx, oldPosz, oldTick)
  if oldPosx and oldPosz and target.x and target.z then
    local dis = math.sqrt((oldPosx - target.x) ^ 2 + (oldPosz - target.z) ^ 2)
    velocity[target.networkID] = kalmanFilters[target.networkID]:STEP(0, dis / (GetTickCount() - oldTick) * CONVERSATION_FACTOR)
  end
end
function UpdateSpeed()
  local tick = GetTickCount()
  for i = 1, #eneplayeres do
    local hero = eneplayeres[i]
    if ValidTarget(hero) and tick >= velocityTimers[hero.networkID] and hero and hero.x and hero.z and tick - oldTick[hero.networkID] > velocity_TO - 1 then
      velocityTimers[hero.networkID] = tick + velocity_TO
      _calcHeroVelocity(hero, oldPosx[hero.networkID], oldPosz[hero.networkID], oldTick[hero.networkID])
      oldPosx[hero.networkID] = hero.x
      oldPosz[hero.networkID] = hero.z
      oldTick[hero.networkID] = tick
      if velocity[hero.networkID] > MS_MIN then
        lastboost[hero.networkID] = tick
      end
    end
  end
end
function CountEnemyNearPerson(person, vrange)
  local EnemyChampions = GetEnemyHeroes()
  local units = 0
  for idx, enemy in GetEnemyHeroes, nil, nil do
    if enemy ~= nil and ValidTarget(enemy) and enemy.networkID ~= person.networkID and vrange > GetDistance(person, enemy) then
      units = units + 1
    end
  end
  return units
end
function IsMyManaLow()
  if myHero.mana < myHero.maxMana * (Config.Extras.mManager / 100) then
    return true
  else
    return false
  end
end
function IsMyManaLowHarass()
  if myHero.mana < myHero.maxMana * (Config.HarassSub.mManager / 100) then
    return true
  else
    return false
  end
end
function Check()
  QReady = _ENV.myHero:CanUseSpell(_ENV._Q) == _ENV.READY
  WReady = _ENV.myHero:CanUseSpell(_ENV._W) == _ENV.READY
  EReady = _ENV.myHero:CanUseSpell(_ENV._E) == _ENV.READY
  RReady = _ENV.myHero:CanUseSpell(_ENV._R) == _ENV.READY
  if _ENV.myHero:GetSpellData(_ENV.SUMMONER_1).name:find("SummonerDot") then
    ignite = _ENV.SUMMONER_1
  elseif _ENV.myHero:GetSpellData(_ENV.SUMMONER_2).name:find("SummonerDot") then
    ignite = _ENV.SUMMONER_2
  end
  igniteReady = ignite ~= nil and _ENV.myHero:CanUseSpell(ignite) == _ENV.READY
  _ENV.EnemyMinions:update()
  _ENV.JungleMinions:update()
  _ENV.AllyMinions:update()
  SpellQ.Range = _ENV.Config.Extras.QRange
  SpellQ1.Range = _ENV.Config.Extras.QRange
  SpellQ2.Range = _ENV.Config.Extras.ExtendQRange
  if _ENV.Config.Support and not QReady and _ENV.Config.SupportSub.Orbwalk then
    _ENV.ts.range = 650
  else
    _ENV.ts.range = 950
  end
end
function IgniteKS()
  if igniteReady then
    local Enemies = _ENV.GetEnemyHeroes()
    for idx, val in _ENV.ipairs(Enemies) do
      if _ENV.ValidTarget(val, 600) and _ENV.getDmg("IGNITE", val, _ENV.myHero) > val.health and 600 >= _ENV.GetDistance(val) then
        _ENV.CastSpell(ignite, val)
      end
    end
  end
end
function checkOrbwalker()
  if _G.MMA_Loaded ~= nil and _G.MMA_Loaded then
    IsMMALoaded = true
    print("MMA detected, using MMA compatibility")
  elseif _G.AutoCarry then
    IsSACLoaded = true
    print("SAC detected, using SAC compatibility")
  elseif FileExist(LIB_PATH .. "SOW.lua") then
    require("SOW")
    SOWi = SOW(VP)
    IsSowLoaded = true
    SOWi:RegisterAfterAttackCallback(AutoAttackReset)
    print("SOW detected, using SOW compatibility")
  else
    print("Please use SAC, MMA, or SOW for your orbwalker")
  end
end
function DrawCircleNextLvl(x, y, z, radius, width, color, chordlength)
  radius = radius or 300
  quality = math.max(8, round(180 / math.deg((math.asin(chordlength / (2 * radius))))))
  quality = 2 * math.pi / quality
  radius = radius * 0.92
  local points = {}
  for theta = 0, 2 * math.pi + quality, quality do
    local c = WorldToScreen(D3DXVECTOR3(x + radius * math.cos(theta), y, z - radius * math.sin(theta)))
    points[#points + 1] = D3DXVECTOR2(c.x, c.y)
  end
  DrawLines2(points, width or 1, color or 4294967295)
end
function round(num)
  if num >= 0 then
    return math.floor(num + 0.5)
  else
    return math.ceil(num - 0.5)
  end
end
function DrawCircle2(x, y, z, radius, color)
  local vPos1 = Vector(x, y, z)
  local vPos2 = Vector(cameraPos.x, cameraPos.y, cameraPos.z)
  local tPos = vPos1 - vPos1 - vPos2:normalized() * radius
  local sPos = WorldToScreen(D3DXVECTOR3(tPos.x, tPos.y, tPos.z))
  if OnScreen({
    x = sPos.x,
    y = sPos.y
  }, {
    x = sPos.x,
    y = sPos.y
  }) then
    DrawCircleNextLvl(x, y, z, radius, 1, color, 100)
  end
end
function OrbWalking(target)
  if TimeToAttack() and GetDistance(target) <= 565 then
    myHero:Attack(target)
  elseif heroCanMove() then
    moveToCursor()
  end
end
function TimeToAttack()
  return GetTickCount() + GetLatency() / 2 > lastAttack + lastAttackCD
end
function heroCanMove()
  return GetTickCount() + GetLatency() / 2 > lastAttack + lastWindUpTime + 20
end
function moveToCursor()
  if GetDistance(mousePos) then
    local moveToPos = myHero + Vector(mousePos) - myHero:normalized() * 300
    myHero:MoveTo(moveToPos.x, moveToPos.z)
  end
end
