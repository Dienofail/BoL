if myHero.charName ~= "Rumble" then
  return
end
function c(bytes)
  s = {}
  for i in pairs(bytes) do
    s[i] = string.char(bytes[i])
  end
  return table.concat(s)
end
_ENV[c({
  100,
  101,
  118,
  110,
  97,
  109,
  101
})] = c({
  100,
  105,
  101,
  110,
  111,
  102,
  97,
  105,
  108
})
_ENV[c({
  115,
  99,
  114,
  105,
  112,
  116,
  110,
  97,
  109,
  101
})] = "rumble"
_ENV[c({
  115,
  99,
  114,
  105,
  112,
  116,
  118,
  101,
  114
})] = 0.16
LoadProtectedScript("VjUzEzdFTURpN0NFYN50TGhvRUxAbTNLRXlNeER2ZUVMRm1zSyB5TXlMMuXFU0DtM0lFeU19RXJlRRMHbTdFRXlNOykeJDA4KCRdISAaOXlHcmVFTUBtM0pFeU17RnppRUxA6zMLRb8NOUZ05AVMAGwzS1j4TXgCc2VFzYFtM4tE+U2kRvJn2MxAba4LxXlSecZyYUVMQGk0S0V5LAo1FxcxTERoM0tFFSIYInJhSExAbXEqNhx7TQIXBiooJW03SEV5TRsycmVFTEBsM0tFeU15RnJlRUxAbTNLRXlNeUZyZEVMQGwzS0V5TXlGcmVFTEBtM0tFeQ==152FFD869C72438577F413093F7FAC75")
--BolAuthInject("", _ENV)
failreasononend = true
failmessage = "Fail Auth "
authmessage = "Authed as " .. UserName
validatingmessage = "Validating"
noservers = "No Servers"
local version = "0.16"
local ProdOneLoaded = false
function LoadInit()
  print("<font color=\"#FF0000\">DienoRumble: Please save file exactly as Rumble.lua in Scripts folder for autoupdater to work</font>")
  DelayAction(checkOrbwalker, 5)
  DelayAction(Menu, 5.5)
  DelayAction(Init, 5.5)
end
require("VPrediction")
local OpenAccess = true
VP = VPrediction()
ProdOneLoaded = false
local IsSowLoaded = false
local isBeta = false
local ProdFile = LIB_PATH .. "Prodiction.lua"
local fh = io.open(ProdFile, "r")
if fh ~= nil then
  local line = fh:read()
  local Version = string.match(line, "%d+.%d+")
  if tonumber(Version) > 0.8 then
    ProdOneLoaded = true
  end
  if ProdOneLoaded then
    require("Prodiction")
    print("<font color=\"#FF0000\">Prodiction 1.0+ Loaded for DienoRumble, 1.0+ option is usable</font>")
  else
    print("<font color=\"#FF0000\">Prodiction 1.0+ not detected for DienoRumble, 1.0+ is not usable (will cause errors if checked)</font>")
  end
else
  print("<font color=\"#FF0000\">No Prodiction.lua detected, using only VPRED</font>")
end
math.randomseed(os.time() + GetInGameTimer() + GetTickCount())
local AUTOUPDATE = true
local UPDATE_NAME = "Rumble"
local UPDATE_HOST = "raw.github.com"
local VERSION_PATH = "/Dienofail/BoL/master/versions/Rumble.version" .. "?rand=" .. math.random(1, 10000)
local UPDATE_FILE_PATH = SCRIPT_PATH .. "Rumble.lua"
local UPDATE_FILE_PATH = string.gsub(UPDATE_FILE_PATH, "\\", "/")
local UPDATE_URL = "http://www.dienofail.com/Rumble.lua" .. "?rand=" .. math.random(1, 100000)
function Download()
  DownloadFile(UPDATE_URL, UPDATE_FILE_PATH, function()
    print("<font color=\"#FF0000\">DienoRumble Download Finished, Please Double F9 after auth</font>")
  end)
end
if AUTOUPDATE then
  local ServerData = GetWebResult(UPDATE_HOST, VERSION_PATH)
  if ServerData then
    local ServerVersion = string.match(ServerData, "%d+.%d+")
    if ServerVersion then
      ServerVersion = tonumber(ServerVersion)
      if ServerVersion > tonumber(version) then
        print("<font color=\"#FF0000\">New version available " .. ServerVersion .. "</font>")
        print("<font color=\"#FF0000\">Updating, please don't press F9</font>")
        DelayAction(Download, 2)
      else
        print("<font color=\"#FF0000\">You have got the latest version (" .. ServerVersion .. ")</font>")
      end
    end
  else
    print("<font color=\"#FF0000\">Error downloading version info</font>")
  end
end
local initDone = false
local VP = VPrediction()
local SpellQ = {
  Range = 600,
  Angle = 30,
  Delay = 0.25,
  Speed = 5000,
  CD = 6000
}
local SpellW = {CD = 6000}
local SpellE = {
  Range = 950,
  Delay = 0.25,
  Speed = 2000,
  CD = 10000,
  Width = 70
}
local SpellR = {
  Range = 1750,
  Delay = 0.25,
  Speed = 1600,
  WallLength = 900,
  Width = 90
}
local LastSpellCast = 0
local LastQTick = 0
local LastETick = 0
local initDone = false
local isOverheated = false
local isDangerZone = false
local isNearDangerZone = false
local CanCast = true
local isSecondE = false
local Config, RotatedVector1, RotatedVector2
local ShouldCastQE = true
local ShouldCastW = true
local ShouldOverheat = false
local IsSowLoaded = false
local isRecalling = false
function Init()
  print("<font color=\"#FF0000\">Cracked by snorflake")
  ts = TargetSelector(TARGET_LESS_CAST_PRIORITY, 850, DAMAGE_MAGICAL)
  ts2 = TargetSelector(TARGET_LESS_CAST_PRIORITY, 1750, DAMAGE_MAGICAL)
  ts.name = "Rumble Main"
  ts2.name = "Rumble Ult"
  Config:addTS(ts)
  Config:addTS(ts2)
  EnemyMinions = minionManager(MINION_ENEMY, 800, myHero, MINION_SORT_MAXHEALTH_DEC)
  JungleMinions = minionManager(MINION_JUNGLE, 800, myHero, MINION_SORT_MAXHEALTH_DEC)
  print("<font color=\"#FF0000\">DienoRumble " .. tostring(version) .. " loaded!<font color=\"#FF0000\">")
  initDone = true
end
function Menu()
  Config = _ENV.scriptConfig("Rumble", "Rumble")
  Config:addParam("Combo", "Combo", _ENV.SCRIPT_PARAM_ONKEYDOWN, false, 32)
  Config:addParam("Harass", "Harass", _ENV.SCRIPT_PARAM_ONKEYDOWN, false, _ENV.string.byte("C"))
  Config:addParam("Farm", "Lane Clear", _ENV.SCRIPT_PARAM_ONKEYDOWN, false, _ENV.string.byte("V"))
  Config:addParam("LastHit", "Last Hit with E", _ENV.SCRIPT_PARAM_ONKEYDOWN, false, _ENV.string.byte("A"))
  Config:addParam("SmartUlt", "Smart Ult", _ENV.SCRIPT_PARAM_ONKEYDOWN, false, _ENV.string.byte("Z"))
  Config:addParam("Flee", "Flee", _ENV.SCRIPT_PARAM_ONKEYDOWN, false, _ENV.string.byte("T"))
  Config:addParam("Manageheat", "Stay in the danger zone", _ENV.SCRIPT_PARAM_ONKEYTOGGLE, true, _ENV.string.byte("U"))
  Config:addSubMenu("Combo options", "ComboSub")
  Config:addSubMenu("Harass options", "HarassSub")
  Config:addSubMenu("Farm Options", "FarmSub")
  Config:addSubMenu("KS", "KS")
  Config:addSubMenu("Draw", "Draw")
  Config:addSubMenu("Heat Management", "Heat")
  Config:addSubMenu("Extra Config", "Extras")
  ComboSub:addParam("useQ", "Use Q", _ENV.SCRIPT_PARAM_ONOFF, true)
  ComboSub:addParam("useW", "Use W", _ENV.SCRIPT_PARAM_ONOFF, true)
  ComboSub:addParam("useE", "Use E", _ENV.SCRIPT_PARAM_ONOFF, true)
  ComboSub:addParam("useR", "Use R", _ENV.SCRIPT_PARAM_ONOFF, false)
  ComboSub:addParam("Overheat", "Allow Smart Overheating", _ENV.SCRIPT_PARAM_ONOFF, true)
  HarassSub:addParam("useQ", "Use Q", _ENV.SCRIPT_PARAM_ONOFF, true)
  HarassSub:addParam("useW", "Use W", _ENV.SCRIPT_PARAM_ONOFF, true)
  HarassSub:addParam("useE", "Use E", _ENV.SCRIPT_PARAM_ONOFF, true)
  HarassSub:addParam("Overheat", "Allow Smart Overheating", _ENV.SCRIPT_PARAM_ONOFF, true)
  FarmSub:addParam("useQ", "Use Q", _ENV.SCRIPT_PARAM_ONOFF, true)
  FarmSub:addParam("useE", "Use E", _ENV.SCRIPT_PARAM_ONOFF, true)
  FarmSub:addParam("Overheat", "Allow Overheat", _ENV.SCRIPT_PARAM_ONOFF, true)
  Draw:addParam("DrawQ", "Draw Q Range", _ENV.SCRIPT_PARAM_ONOFF, true)
  Draw:addParam("DrawE", "Draw E Range", _ENV.SCRIPT_PARAM_ONOFF, true)
  Draw:addParam("DrawR", "Draw R Range", _ENV.SCRIPT_PARAM_ONOFF, true)
  Draw:addParam("KillText", "Draw Kill Text", _ENV.SCRIPT_PARAM_ONOFF, true)
  KS:addParam("useQ", "Use Q", _ENV.SCRIPT_PARAM_ONOFF, true)
  KS:addParam("useE", "Use E", _ENV.SCRIPT_PARAM_ONOFF, true)
  KS:addParam("useR", "Use R", _ENV.SCRIPT_PARAM_ONOFF, false)
  KS:addParam("Overheat", "Allow Overheat to KS", _ENV.SCRIPT_PARAM_ONOFF, true)
  Heat:addParam("useQ", "Use Q", _ENV.SCRIPT_PARAM_ONOFF, true)
  Heat:addParam("useW", "Use W", _ENV.SCRIPT_PARAM_ONOFF, true)
  Extras:addParam("Debug", "Debug", _ENV.SCRIPT_PARAM_ONOFF, false)
  Extras:addParam("WRange", "Min W Gapclose Range", _ENV.SCRIPT_PARAM_SLICE, 700, 0, 1450, 0)
  Extras:addParam("REnemies", "Min Enemies for Auto R", _ENV.SCRIPT_PARAM_SLICE, 3, 1, 5, 0)
  Extras:addParam("RDuration", "Min predicted duration for R (s)", _ENV.SCRIPT_PARAM_SLICE, 0.75, 0, 2, 2)
  Extras:addParam("EAutoCast", "Auto E Slow/Immobile/Dash", _ENV.SCRIPT_PARAM_ONOFF, true)
  Extras:addParam("SpaceE", "Space out 2nd E in melee range", _ENV.SCRIPT_PARAM_ONOFF, true)
  Extras:addParam("SpaceETime", "Time between Es for Space E", _ENV.SCRIPT_PARAM_SLICE, 2.75, 0.25, 5, 2)
  Extras:addParam("Prodiction", "Use Prodiction 1.0+ instead of VPred", _ENV.SCRIPT_PARAM_ONOFF, false)
  if IsSowLoaded then
    Config:addSubMenu("Orbwalker", "SOWiorb")
    _ENV.SOWi:LoadToMenu(SOWiorb)
    SOWiorb.Mode0 = false
  end
  Config:permaShow("Combo")
  Config:permaShow("Harass")
  Config:permaShow("Farm")
  Config:permaShow("LastHit")
  Config:permaShow("Manageheat")
  Config:permaShow("Flee")
end
function GetCustomTarget()
  ts:update()
  if _G.MMA_Target and _G.MMA_Target.type == myHero.type then
    return _G.MMA_Target
  end
  if _G.AutoCarry and _G.AutoCarry.Crosshair and _G.AutoCarry.Attack_Crosshair and _G.AutoCarry.Attack_Crosshair.target and _G.AutoCarry.Attack_Crosshair.target.type == myHero.type then
    return _G.AutoCarry.Attack_Crosshair.target
  end
  return ts.target
end
function OnTick()
  if initDone then
    _ENV.Checks()
    _ENV.target = _ENV.GetCustomTarget()
    _ENV.target2 = _ENV.ts2.target
    if Config.Combo and _ENV.target ~= nil and _ENV.ValidTarget(_ENV.target) then
      _ENV.ComputeHeat(_ENV.target)
      _ENV.Combo(_ENV.target)
    end
    if Config.Harass and _ENV.target ~= nil and _ENV.ValidTarget(_ENV.target) then
      _ENV.ComputeHeat(_ENV.target)
      _ENV.Harass(_ENV.target)
    end
    if _ENV.RReady and _ENV.target ~= nil and _ENV.ValidTarget(_ENV.target) and Config.SmartUlt then
      _ENV.CastR(_ENV.target)
    elseif _ENV.RReady and _ENV.target2 ~= nil and _ENV.ValidTarget(_ENV.target2) and Config.SmartUlt then
      _ENV.CastR(_ENV.target2)
    end
    if Config.Farm then
      _ENV.Farm()
    end
    if Config.LastHit then
      _ENV.LastHit()
    end
    _ENV.KillSteal()
    _ENV.AutoManageHeat()
    if Config.Flee then
      _ENV.Flee()
    end
  end
end
function Flee()
  local CloseEnemy, CloseDistance = GetClosestEnemy(myHero)
  if CloseEnemy ~= nil and CloseDistance < 900 and ValidTarget(CloseEnemy, 900) and EReady then
    CastE(CloseEnemy)
  end
  if WReady then
    CastSpell(_W)
  end
  myHero:MoveTo(mousePos.x, mousePos.z)
end
function AutoManageHeat()
  if isRecalling then
    return
  end
  if Config.Manageheat and _ENV.CountEnemyHeroInRange(1000, _ENV.myHero) < 2 then
    if _ENV.WReady and Config.Heat.useW and _ENV.myHero.mana < 35 and _ENV.GetTickCount() - LastSpellCast > 750 then
      _ENV.CastSpell(_ENV._W)
    elseif _ENV.QReady and not _ENV.WReady and Config.Heat.useQ and _ENV.myHero.mana < 35 and _ENV.GetTickCount() - LastSpellCast > 750 and not _ENV.CheckQCreeps() then
      _ENV.CastQRegular()
    end
  elseif Config.Manageheat and _ENV.WReady and Config.Heat.useW and _ENV.myHero.mana < 35 and _ENV.GetTickCount() - LastSpellCast > 750 then
    _ENV.CastSpell(_ENV._W)
  end
end
function Combo(Target)
  if not ValidTarget(Target) or Target.dead then
    return
  end
  if Config.ComboSub.useQ and QReady and ShouldCastQE and GetDistance(Target) < 700 and GetTickCount() - LastSpellCast > 250 then
    CastQCombo(Target)
  end
  if Config.ComboSub.useE and not isSecondE and EReady and ShouldCastQE and GetDistance(Target) < 1000 and GetTickCount() - LastSpellCast > 250 then
    if Config.Extras.Debug then
      print("Casting 1st E")
    end
    CastE(Target)
  end
  if Config.ComboSub.useE and EReady and isSecondE and GetDistance(Target) < 1000 then
    if Config.Extras.SpaceE and GetTickCount() - LastSpellCast > 250 and GetDistance(Target) >= 300 then
      if Config.Extras.Debug then
        print("Casting 2nd E 1")
      end
      CastE(Target)
    elseif Config.Extras.SpaceE and GetTickCount() - LastETick > 1000 * Config.Extras.SpaceETime and GetDistance(Target) < 300 then
      if Config.Extras.Debug then
        print("Casting 2nd E 2")
      end
      CastE(Target)
    elseif not Config.Extras.SpaceE and GetTickCount() - LastSpellCast > 250 then
      if Config.Extras.Debug then
        print("Casting 2nd E 3")
      end
      CastE(Target)
    end
  end
  if Config.ComboSub.useW and WReady and ShouldCastW and GetDistance(Target) < 900 and GetTickCount() - LastSpellCast > 250 then
    local PredictedPos, _, _ = VP:GetPredictedPos(Target, 0.6, math.huge, myHero, false)
    if GetDistance(PredictedPos) > GetDistance(Target) + 350 and GetTickCount() - LastSpellCast > 250 and GetDistance(Target) > Config.Extras.WRange then
      CastSpell(_W)
    end
  end
  if Config.ComboSub.useR and RReady and QReady and EReady and getDmg("Q", Target, myHero) + getDmg("R", Target, myHero) + 2 * getDmg("E", Target, myHero) > Target.health then
    CastR(Target)
  elseif Config.ComboSub.useR and RReady and QReady and getDmg("Q", Target, myHero) + getDmg("R", Target, myHero) > Target.health then
    CastR(Target)
  elseif Config.ComboSub.useR and RReady and EReady and 2 * getDmg("E", Target, myHero) + getDmg("R", Target, myHero) > Target.health then
    CastR(Target)
  end
  if Config.ComboSub.Overheat and ShouldOverheat and GetTickCount() - LastSpellCast > 250 then
    if Config.Extras.Debug then
      print("Overheating due to ShouldOverheat!")
    end
    CastQCombo(Target)
    CastE(Target)
    CastSpell(_W)
  end
end
function Harass(Target)
  if not ValidTarget(Target) or Target.dead then
    return
  end
  if Config.HarassSub.useQ and QReady and ShouldCastQE and GetDistance(Target) < 700 then
    CastQCombo(Target)
  end
  if Config.HarassSub.useE and EReady and isSecondE and GetDistance(Target) < 1000 then
    CastE(Target)
  end
  if Config.HarassSub.useE and EReady and ShouldCastQE and GetDistance(Target) < 1000 then
    CastE(Target)
  end
  if Config.ComboSub.useW and WReady and ShouldCastW and GetDistance(Target) < 900 and GetTickCount() - LastSpellCast > 250 then
    local PredictedPos, _, _ = VP:GetPredictedPos(Target, 0.6, math.huge, myHero, false)
    if GetDistance(PredictedPos) > GetDistance(Target) + 350 and GetTickCount() - LastSpellCast > 250 and GetDistance(Target) > Config.Extras.WRange then
      CastSpell(_W)
    end
  end
  if Config.HarassSub.Overheat and ShouldOverheat then
    if Config.Extras.Debug then
      print("Overheating due to ShouldOverheat!")
    end
    CastQCombo(Target)
    CastE(Target)
    CastSpell(_W)
  end
end
function KillSteal()
  local Enemies = GetEnemyHeroes()
  for idx, enemy in ipairs(Enemies) do
    if enemy ~= nil and ValidTarget(enemy) and not enemy.dead and GetDistance(enemy) < SpellQ.Range and Config.KS.useQ and Config.KS.Overheat and ShouldCastQE then
      local PredictedPos, _, _ = VP:GetConeAOECastPosition(enemy, 0.25, 30, 600, SpellQ.Speed, myHero)
      if getDmg("Q", enemy, myHero, 3) / 2 > enemy.health and GetDistance(PredictedPos) < SpellQ.Range then
        if Config.Extras.Debug then
          print("KS: Q")
          print(PredictedPos)
        end
        CastSpell(_Q, PredictedPos.x, PredictedPos.z)
      end
    end
    if enemy ~= nil and ValidTarget(enemy) and not enemy.dead and GetDistance(enemy) < SpellE.Range and Config.KS.useE and Config.KS.Overheat and ShouldCastQE and getDmg("E", enemy, myHero) > enemy.health then
      CastE(enemy)
    end
    if enemy ~= nil and ValidTarget(enemy) and not enemy.dead and GetDistance(enemy) < SpellR.Range and Config.KS.useR and RReady and getDmg("R", enemy, myHero, 1) * 1.5 > enemy.health then
      CastR(enemy)
    end
  end
end
function CastQCombo(Target)
  if Target ~= nil and ValidTarget(Target) and not Target.dead then
    local FaceVector = Vector(Vector(myHero.visionPos) - Vector(myHero)):normalized()
    local EnemyVector = Vector(Vector(Target.visionPos) - Vector(myHero.visionPos)):normalized()
    if FaceVector:angle(EnemyVector) < 0.7853981624999999 or FaceVector:angle(EnemyVector) > 2 * math.pi - 0.7853981624999999 and GetDistance(Target) < 700 then
      local PredictedPos, _, _ = VP:GetConeAOECastPosition(Target, 0.25, 30, 600, SpellQ.Speed, myHero)
      CastSpell(_Q, PredictedPos.x, PredictedPos.z)
    end
  end
end
function CheckQCreeps()
  if not QReady then
    return
  end
  EnemyMinions:update()
  for idx, minion in ipairs(EnemyMinions.objects) do
    local FaceVector = Vector(Vector(myHero.visionPos) - Vector(myHero)):normalized()
    local MinionVector = Vector(Vector(minion) - Vector(myHero.visionPos)):normalized()
    if FaceVector:angle(MinionVector) < 0.7853981624999999 or FaceVector:angle(MinionVector) > 2 * math.pi - 0.7853981624999999 and GetDistance(minion) < 700 then
      return true
    end
  end
  return false
end
function CastQRegular()
  local FaceVector = Vector(Vector(myHero.visionPos) - Vector(myHero)):normalized()
  local ToCastVector = Vector(myHero.visionPos) + FaceVector * 200
  if QReady then
    CastSpell(_Q, ToCastVector.x, ToCastVector.z)
  end
end
function CastE(Target)
  if EReady and ValidTarget(Target) and GetDistance(Target) < SpellE.Range + 50 then
    local CastPosition, HitChance
    if not Config.Extras.Prodiction then
      CastPosition, HitChance = VP:GetLineCastPosition(Target, SpellE.Delay, SpellE.Width, SpellE.Range, SpellE.Speed, myHero, true)
    else
      CastPosition, info = Prodiction.GetPrediction(Target, SpellE.Range, SpellE.Speed, SpellE.Delay, SpellE.Width, myHero)
      local isCol = false
      if info ~= nil then
        isCol, _ = info.collision()
      end
      if info ~= nil and info.hitchance ~= nil and CastPosition ~= nil then
        HitChance = info.hitchance
      end
    end
    if CastPosition ~= nil and HitChance ~= nil and HitChance > 1 and GetDistance(CastPosition) < SpellE.Range and not isCol then
      CastSpell(_E, CastPosition.x, CastPosition.z)
    end
  end
end
function CastW(Target)
  if WReady and myHero.mana < 100 then
    CastSpell(_W)
  end
end
function CastR(Target)
  if not RReady then
    return
  end
  if ValidTarget(Target) and not Target.dead and Target ~= nil then
    if CountEnemyHeroInRange(1000, Target) > 1 then
      local CastPosition1, CastPosition2, NumHit = CalculateUltMultiple(Target)
      if CastPosition1 ~= nil and CastPosition2 ~= nil and NumHit ~= nil then
        CastUlt(CastPosition1, CastPosition2)
      end
    else
      local CastPosition1, CastPosition2 = CalculateUltSingle(Target)
      if CastPosition1 ~= nil and CastPosition2 ~= nil then
        CastUlt(CastPosition1, CastPosition2)
      end
    end
  end
end
function CastRAuto(Target)
  if Target ~= nil and ValidTarget(Target) and not Target.dead and CountEnemyHeroInRange(1000, Target) > 1 then
    local CastPosition1, CastPosition2, NumHit = CalculateUltMultiple(Target)
    if CastPosition1 ~= nil and CastPosition2 ~= nil and NumHit ~= nil and NumHit >= Config.Extras.REnemies then
      CastUlt(CastPosition1, CastPosition2)
    end
  end
end
function CheckOverheatStatus(Target)
  if Target ~= nil and ValidTarget(Target) and not QReady and not EReady and myHero:GetSpellData(_Q).currentCd > 3 and myHero:GetSpellData(_E).currentCd > 4 and GetDistance(Target) < 350 then
    local PADdamage = getDmg("P", Target, myHero) + getDmg("AD", Target, myHero)
    if Config.Extras.Debug then
      print(PADdamage)
    end
    if PADdamage * 3 > Target.health then
      return true
    else
      return false
    end
  else
    return false
  end
end
function ComputeHeat(Target)
  if Target == nil or not ValidTarget(Target) or Target.dead then
    return
  end
  if myHero.mana > 80 and CheckOverheatStatus(Target) then
    ShouldOverheat = true
    ShouldCastQE = false
    ShouldCastW = false
  elseif myHero.mana > 80 and not CheckOverheatStatus(Target) then
    ShouldOverheat = false
    ShouldCastQE = false
    ShouldCastW = false
  elseif myHero.mana > 60 then
    ShouldOverheat = false
    ShouldCastQE = true
    ShouldCastW = false
  elseif myHero.mana > 0 then
    ShouldOverheat = false
    ShouldCastW = true
    ShouldCastQE = true
  end
end
function Farm()
  EnemyMinions:update()
  JungleMinions:update()
  minion = nil
  if #EnemyMinions.objects > 0 then
    minion = EnemyMinions.objects[1]
  elseif #JungleMinions.objects > 0 then
    minion = JungleMinions.objects[1]
  end
  if minion ~= nil and QReady and GetDistance(minion) < SpellQ.Range and Config.FarmSub.useQ then
    if myHero.mana < 80 and not Config.FarmSub.Overheat then
      CastSpell(_Q, minion.x, minion.z)
    elseif Config.FarmSub.Overheat then
      CastSpell(_Q, minion.x, minion.z)
    end
  elseif minion ~= nil and EReady and GetDistance(minion) < SpellE.Range and Config.FarmSub.useE then
    if myHero.mana < 80 and not Config.FarmSub.Overheat then
      CastSpell(_E, minion.x, minion.z)
    elseif Config.FarmSub.Overheat then
      CastSpell(_E, minion.x, minion.z)
    end
  end
end
function LastHit()
  EnemyMinions:update()
  if not EReady then
    return
  end
  local MinionCollision = function(minion)
    if minion ~= nil and ValidTarget(minion) then
      for idx, creep in ipairs(EnemyMinions.objects) do
        if creep.networkID ~= minion.networkID then
          local pointSegment1, pointLine1, isOnSegment1 = VectorPointProjectionOnLineSegment(Vector(myHero.visionPos), Vector(minion), Vector(creep))
          if isOnSegment1 and GetDistance(pointSegment1, pointline1) < SpellE.Width + 60 then
            return true
          end
        end
      end
    end
    return false
  end
  for idx, minion in ipairs(EnemyMinions.objects) do
    if minion ~= nil and ValidTarget(minion) and GetDistance(minion) < SpellE.Range and getDmg("E", minion, myHero) > minion.health and not MinionCollision(minion) then
      CastSpell(_E, minion.x, minion.z)
    end
  end
end
function CalculateUltSingle(Target)
  if Target ~= nil and ValidTarget(Target) and not Target.dead and GetDistance(Target) < 1600 then
    if Config.Extras.Debug then
      print("CalculateUltSingle called")
    end
    local Position1, Position2
    local current_waypoints = {}
    table.insert(current_waypoints, Vector(Target.visionPos.x, 0, Target.visionPos.z))
    for i = Target.pathIndex, Target.pathCount do
      path = Target:GetPath(i)
      if path ~= nil and path.x then
        table.insert(current_waypoints, Vector(path.x, 0, path.z))
      end
    end
    local CheckWall = function(Position1, Position2)
      local Posmidpoint = {
        x = (Position1.x + Position1.x) / 2,
        y = (Position1.y + Position2.y) / 2,
        z = (Position1.z + Position2.z) / 2
      }
      local EndInitalVector = Vector(Vector(Position2) - Vector(Position1)):normalized()
      local Mulitplier = 30
      local WallCount = 0
      for i = 1, 20 do
        local current_multiplier = 60 * i
        local CurrentCheckVector = Vector(Position1) + EndInitalVector * current_multiplier
        if IsWall(D3DXVECTOR3(CurrentCheckVector.x, CurrentCheckVector.y, CurrentCheckVector.z)) then
          WallCount = WallCount + 1
        end
      end
      if WallCount >= 8 then
        return true
      else
        return false
      end
    end
    local isLinear = true
    if #current_waypoints > 3 then
      for i = 2, #current_waypoints - 1 do
        local pointSegment1, pointLine1, isOnSegment1 = VectorPointProjectionOnLineSegment(Vector(current_waypoints[1]), Vector(current_waypoints[#current_waypoints]), Vector(current_waypoints[i]))
        if isOnSegment1 and pointSegment1 ~= nil and pointLine1 ~= nil and GetDistance(pointSegment1, pointLine1) > SpellR.Width + 100 then
          isLinear = false
        end
      end
    end
    if #current_waypoints >= 2 then
      local DurationSufficient = false
      local travel_time = 0
      if isLinear then
        for current_index = 1, #current_waypoints - 1 do
          local current_time = GetDistance(current_waypoints[current_index], current_waypoints[current_index + 1]) / Target.ms
          travel_time = travel_time + current_time
        end
        if travel_time >= Config.Extras.RDuration then
          DurationSufficient = true
        end
      end
      local midpoint = {
        x = (current_waypoints[1].x + current_waypoints[#current_waypoints].x) / 2,
        y = 0,
        z = (current_waypoints[1].z + current_waypoints[#current_waypoints].z) / 2
      }
      local FinalInitialUnitVector = Vector(Vector(current_waypoints[#current_waypoints]) - Vector(current_waypoints[1])):normalized()
      if GetDistance(current_waypoints[1], midpoint) > 425 then
        local Position2 = Vector(midpoint)
        local Position1 = Vector(current_waypoints[1]) - FinalInitialUnitVector * 200
        if not CheckWall(Position1, Position2) then
          return Position1, Position2
        end
      elseif GetDistance(current_waypoints[1], current_waypoints[#current_waypoints]) < SpellR.WallLength and travel_time >= 0.7 then
        local Position2 = Vector(midpoint) + FinalInitialUnitVector * 450
        local Position1 = Vector(midpoint) - FinalInitialUnitVector * 420
        if not CheckWall(Position1, Position2) then
          return Position1, Position2
        end
      elseif GetDistance(current_waypoints[1], current_waypoints[#current_waypoints]) < SpellR.WallLength and travel_time >= 0.4 then
        local Position2 = Vector(midpoint) + FinalInitialUnitVector * 400
        local Position1 = Vector(midpoint) - FinalInitialUnitVector * 440
        if not CheckWall(Position1, Position2) then
          return Position1, Position2
        end
      elseif GetDistance(current_waypoints[1], current_waypoints[#current_waypoints]) < SpellR.WallLength and travel_time >= 0 then
        local Position2 = Vector(midpoint) + FinalInitialUnitVector * 350
        local Position1 = Vector(midpoint) - FinalInitialUnitVector * 460
        if not CheckWall(Position1, Position2) then
          return Position1, Position2
        end
      end
    else
      local FinalInitialUnitVector = Vector(Vector(Target.visionPos) - Vector(myHero.visionPos)):normalized()
      if GetDistance(Target) < SpellR.Range then
        local Position1 = Vector(Target.visionPos) + FinalInitialUnitVector * 360
        local Position2 = Vector(Target.visionPos) - FinalInitialUnitVector * 360
        return Position1, Position2
      end
    end
    return nil, nil
  end
  return nil, nil
end
function CalculateUltMultiple(Target)
  if Target ~= nil and ValidTarget(Target) and not Target.dead and GetDistance(Target) < 1600 then
    if Config.Extras.Debug then
      print("CalculateUltMultiple called")
    end
    local Position1, Position2
    local current_waypoints = {}
    table.insert(current_waypoints, Vector(Target.visionPos.x, 0, Target.visionPos.z))
    for i = Target.pathIndex, Target.pathCount do
      path = Target:GetPath(i)
      if path ~= nil and path.x then
        table.insert(current_waypoints, Vector(path.x, 0, path.z))
      end
    end
    local CheckWall = function(Position1, Position2)
      local Posmidpoint = {
        x = (Position1.x + Position1.x) / 2,
        y = (Position1.y + Position2.y) / 2,
        z = (Position1.z + Position2.z) / 2
      }
      local EndInitalVector = Vector(Vector(Position2) - Vector(Position1)):normalized()
      local Mulitplier = 30
      local WallCount = 0
      for i = 1, 20 do
        local current_multiplier = 60 * i
        local CurrentCheckVector = Vector(Position1) + EndInitalVector * current_multiplier
        if IsWall(D3DXVECTOR3(CurrentCheckVector.x, CurrentCheckVector.y, CurrentCheckVector.z)) then
          WallCount = WallCount + 1
        end
      end
      if WallCount >= 8 then
        return true
      else
        return false
      end
    end
    local CalculateNumHit = function(Position1, Position2, Target)
      if Target ~= nil and ValidTarget(Target) and Position1 ~= nil and Position2 ~= nil then
        local Posmidpoint = {
          x = (Position1.x + Position2.x) / 2,
          y = 0,
          z = (Position1.z + Position2.z) / 2
        }
        local EndInitalVector = Vector(Vector(Position2) - Vector(Position1)):normalized()
        local ExtensionAmount = SpellR.WallLength / 2
        local ExtPos1 = Vector(Posmidpoint) + EndInitalVector * ExtensionAmount
        local ExtPos2 = Vector(Posmidpoint) - EndInitalVector * ExtensionAmount
        local Enemies = GetEnemyHeroes()
        local NumHit = 0
        for idx, enemy in ipairs(Enemies) do
          if ValidTarget(enemy) and enemy.networkID ~= Target.networkID and GetDistance(enemy, Target) < 1000 then
            local EnemyPredictedPos = VP:GetPredictedPos(enemy, 0.25, math.huge, myHero, false)
            if EnemyPredictedPos ~= nil then
              local pointSegment2, pointLine2, isOnSegment2 = VectorPointProjectionOnLineSegment(Vector(ExtPos1), Vector(ExtPos2), Vector(EnemyPredictedPos))
              if isOnSegment2 and pointSegment2 ~= nil and pointLine2 ~= nil and GetDistance(pointSegment2, pointLine2) < SpellR.Width + 60 then
                NumHit = NumHit + 1
              end
            end
          end
        end
        if Config.Extras.Debug then
          print("Returning numhit " .. tostring(NumHit))
        end
        return NumHit
      end
    end
    local Enemies = GetEnemyHeroes()
    local BestCastPosition1, BestCastPosition2
    local BestHits = 0
    local TargetPredictedPos = VP:GetPredictedPos(Target, 0.25, SpellR.Speed, myHero, false)
    for idx, enemy in ipairs(Enemies) do
      if enemy ~= nil and ValidTarget(enemy) and not enemy.dead and enemy.networkID ~= Target.networkID then
        local EnemyPredictedPos = VP:GetPredictedPos(enemy, 0.25, math.huge, myHero, false)
        if GetDistance(enemy, Target) < 1000 and GetDistance(EnemyPredictedPos, TargetPredictedPos) < SpellR.WallLength and EnemyPredictedPos ~= nil and TargetPredictedPos ~= nil then
          local CurrentMidpoint = GetMidPoint(EnemyPredictedPos, TargetPredictedPos)
          local MidVector = Vector(Vector(EnemyPredictedPos) - Vector(TargetPredictedPos)):normalized()
          local Position1 = CurrentMidpoint + MidVector * (SpellR.WallLength / 2)
          local Position2 = CurrentMidpoint - MidVector * (SpellR.WallLength / 2)
          local CurrentHit = CalculateNumHit(Position1, Position2, Target)
          if BestHits < CurrentHit then
            BestHits = CurrentHit
            BestCastPosition1 = Position1
            BestCastPosition2 = Position2
          end
        end
      end
    end
    if BestHits >= 2 and BestCastPosition1 ~= nil and BestCastPosition2 ~= nil and not CheckWall(BestCastPosition1, BestCastPosition2) then
      return BestCastPosition1, BestCastPosition2, BestHits
    end
    local isLinear = true
    if #current_waypoints > 3 then
      for i = 2, #current_waypoints - 1 do
        local pointSegment1, pointLine1, isOnSegment1 = VectorPointProjectionOnLineSegment(Vector(current_waypoints[1]), Vector(current_waypoints[#current_waypoints]), Vector(current_waypoints[i]))
        if isOnSegment1 and pointSegment1 ~= nil and pointLine1 ~= nil and GetDistance(pointSegment1, pointLine1) > SpellR.Width + 100 then
          isLinear = false
        end
      end
    end
    if #current_waypoints >= 2 then
      local DurationSufficient = false
      local travel_time = 0
      if isLinear then
        for current_index = 1, #current_waypoints - 1 do
          local current_time = GetDistance(current_waypoints[current_index], current_waypoints[current_index + 1]) / Target.ms
          travel_time = travel_time + current_time
        end
        if travel_time >= Config.Extras.RDuration then
          DurationSufficient = true
        end
      end
      local midpoint = {
        x = (current_waypoints[1].x + current_waypoints[#current_waypoints].x) / 2,
        y = 0,
        z = (current_waypoints[1].z + current_waypoints[#current_waypoints].z) / 2
      }
      local FinalInitialUnitVector = Vector(Vector(current_waypoints[#current_waypoints]) - Vector(current_waypoints[1])):normalized()
      if GetDistance(current_waypoints[1], midpoint) > 425 then
        local Position2 = Vector(midpoint)
        local Position1 = Vector(current_waypoints[1]) - FinalInitialUnitVector * 200
        if not CheckWall(Position1, Position2) then
          local CurrentHit = CalculateNumHit(Position1, Position2, Target)
          return Position1, Position2, CurrentHit
        end
      elseif GetDistance(current_waypoints[1], current_waypoints[#current_waypoints]) < SpellR.WallLength and travel_time >= 0.7 then
        local Position2 = Vector(midpoint) + FinalInitialUnitVector * 450
        local Position1 = Vector(midpoint) - FinalInitialUnitVector * 250
        if not CheckWall(Position1, Position2) then
          local CurrentHit = CalculateNumHit(Position1, Position2, Target)
          return Position1, Position2, CurrentHit
        end
      elseif GetDistance(current_waypoints[1], current_waypoints[#current_waypoints]) < SpellR.WallLength and travel_time >= 0.4 then
        local Position2 = Vector(midpoint) + FinalInitialUnitVector * 400
        local Position1 = Vector(midpoint) - FinalInitialUnitVector * 300
        if not CheckWall(Position1, Position2) then
          local CurrentHit = CalculateNumHit(Position1, Position2, Target)
          return Position1, Position2, CurrentHit
        end
      elseif GetDistance(current_waypoints[1], current_waypoints[#current_waypoints]) < SpellR.WallLength and travel_time >= 0 then
        local Position2 = Vector(midpoint) + FinalInitialUnitVector * 350
        local Position1 = Vector(midpoint) - FinalInitialUnitVector * 350
        if not CheckWall(Position1, Position2) then
          local CurrentHit = CalculateNumHit(Position1, Position2, Target)
          return Position1, Position2, CurrentHit
        end
      end
    else
      local CloseEnemy, CloseDistance = GetClosestEnemy(Target)
      if CloseEnemy ~= nil and CloseDistance ~= nil and CloseDistance < 1000 then
        local FinalInitialUnitVector = Vector(Vector(Target.visionPos) - Vector(CloseEnemy.visionPos)):normalized()
        local CloseMidpoint = GetMidPoint(Target.visionPos, CloseEnemy.visionPos)
        if GetDistance(Target) < SpellR.Range then
          local Position1 = Vector(CloseMidpoint.visionPos) + FinalInitialUnitVector * 360
          local Position2 = Vector(CloseMidpoint.visionPos) - FinalInitialUnitVector * 360
          if not CheckWall(Position1, Position2) then
            local CurrentHit = CalculateNumHit(Position1, Position2, Target)
            return Position1, Position2, CurrentHit
          end
        end
      else
        local FinalInitialUnitVector = Vector(Vector(Target.visionPos) - Vector(myHero.visionPos)):normalized()
        if GetDistance(Target) < SpellR.Range then
          local Position1 = Vector(Target.visionPos) + FinalInitialUnitVector * 360
          local Position2 = Vector(Target.visionPos) - FinalInitialUnitVector * 360
          if not CheckWall(Position1, Position2) then
            local CurrentHit = CalculateNumHit(Position1, Position2, Target)
            return Position1, Position2, CurrentHit
          end
        end
      end
    end
    return nil, nil, nil
  end
  return nil, nil, nil
end
function GetClosestEnemy(Target)
  if Target ~= nil then
    local Enemies = GetEnemyHeroes()
    local closest_enemy
    local closest_distance = math.huge
    for idx, enemy in ipairs(Enemies) do
      if ValidTarget(enemy) and enemy.networkID ~= Target.networkID and closest_distance > GetDistance(enemy, Target) then
        closest_distance = GetDistance(enemy, Target)
        closest_enemy = enemy
      end
    end
    if enemy ~= nil and closest_distance ~= nil then
      return enemy, closest_distance
    end
  end
end
function GetMidPoint(Position1, Position2)
  local Posmidpoint = {
    x = (Position1.x + Position1.x) / 2,
    y = 0,
    z = (Position1.z + Position2.z) / 2
  }
  return Posmidpoint
end
function OnGainBuff(unit, buff)
  if initDone then
    if unit.isMe and buff.name == "rumbleoverheat" then
      isOverheated = true
    end
    if unit.isMe and buff.name == "RumbleGrenade" then
      isSecondE = true
    end
    if unit.isMe and buff.name:find("Recall") then
      isRecalling = true
    end
  end
end
function OnLoseBuff(unit, buff)
  if initDone then
    if unit.isMe and buff.name == "rumbleoverheat" then
      isOverheated = false
    end
    if unit.isMe and buff.name == "RumbleGrenade" then
      isSecondE = false
    end
    if unit.isMe and buff.name:find("Recall") then
      isRecalling = false
    end
  end
end
function OnRecall(hero, channelTimeInMs)
  if hero.networkID == myHero.networkID and initDone  then
    isRecalling = true
  end
end
function OnAbortRecall(hero)
  if hero.networkID == myHero.networkID and initDone then
    isRecalling = false
  end
end
function OnFinishRecall(hero)
  if hero.networkID == myHero.networkID and initDone then
    isRecalling = false
  end
end
function CheckCone(position)
  if GetDistance(position) > 750 then
    return false
  end
  local FaceVector = Vector(Vector(myHero.visionPos) - Vector(myHero)):normalized()
  local RotationDegree1 = SpellQ.Angle * 0.0174532925
  local FaceRotatedVec1 = FaceVector:rotated(RotationDegree1, 0, RotationDegree1)
  local RotationDegree2 = 360 - SpellQ.Angle * 0.0174532925
  local FaceRotatedVec2 = FaceVector:rotated(RotationDegree2, 0, RotationDegree2)
  RotatedVector1 = Vector(myHero.visionPos) + FaceRotatedVec1 * 600
  RotatedVector2 = Vector(myHero.visionPos) + FaceRotatedVec2 * 600
  if GetDistance(position, myHero.visionPos) < 600 and RotatedVector1:angle(Vector(position)) < RotatedVector1:angle(Vector(RotatedVector2)) then
    return true
  else
    return false
  end
end
function OnProcessSpell(unit, spell)
  if  _G[c({
    106,
    100,
    107,
    110,
    109,
    118
  })] then
    return
  end
  if unit == myHero then
    if spell.name:lower():find("attack") then
      lastAttack = GetTickCount() - GetLatency() / 2
      lastWindUpTime = spell.windUpTime * 1000
      lastAttackCD = spell.animationTime * 1000
      animation_time = spell.windUpTime
    end
    if spell.name == "RumbleFlameThrower" then
      LastSpellCast = GetTickCount()
      LastQTick = GetTickCount()
    end
    if spell.name == "RumbleShield" then
      LastSpellCast = GetTickCount()
    end
    if spell.name == "RumbleGrenade" then
      LastSpellCast = GetTickCount()
      LastETick = GetTickCount()
    end
    if spell.name == "RumbleCarpetBomb" then
      LastSpellCast = GetTickCount()
    end
  end
end
function OnDraw()
  if initDone then
    if Config.Extras.Debug and ShouldOverheat ~= nil and ShouldCastQE ~= nil and ShouldCastW ~= nil then
      _ENV.DrawText3D("Overheat: " .. _ENV.tostring(ShouldOverheat) .. " ShouldCastQE: " .. _ENV.tostring(ShouldCastQE) .. " ShouldCastW: " .. _ENV.tostring(ShouldCastW) .. " SecondE " .. _ENV.tostring(isSecondE) .. " recalling " .. _ENV.tostring(isRecalling), _ENV.myHero.x, _ENV.myHero.y, _ENV.myHero.z, 20, _ENV.ARGB(255, 255, 0, 0), true)
    end
    if Config.Extras.Debug and _ENV.minion ~= nil then
      _ENV.DrawCircle3D(_ENV.minion.x, _ENV.minion.y, _ENV.minion.z, 200, 1, _ENV.ARGB(255, 0, 255, 255))
    end
    if Config.Draw.DrawQ and _ENV.QReady then
      _ENV.DrawCircle3D(_ENV.myHero.x, _ENV.myHero.y, _ENV.myHero.z, SpellQ.Range, 1, _ENV.ARGB(255, 0, 255, 255))
    end
    if Config.Draw.DrawE and _ENV.EReady then
      _ENV.DrawCircle3D(_ENV.myHero.x, _ENV.myHero.y, _ENV.myHero.z, SpellE.Range, 1, _ENV.ARGB(255, 0, 255, 255))
    end
    if Config.Draw.DrawR and _ENV.RReady then
      _ENV.DrawCircle3D(_ENV.myHero.x, _ENV.myHero.y, _ENV.myHero.z, SpellR.Range, 1, _ENV.ARGB(255, 0, 255, 255))
    end
    if Config.Draw.KillText then
      local Enemies = _ENV.GetEnemyHeroes()
      for idx, enemy in _ENV.ipairs(Enemies) do
        if _ENV.ValidTarget(enemy) and not enemy.dead and _ENV.GetDistance(enemy) < 2000 and _ENV.QReady and _ENV.getDmg("Q", enemy, _ENV.myHero) > enemy.health then
          _ENV.DrawText3D("Short Q", enemy.x, enemy.y, enemy.z, 20, _ENV.ARGB(255, 255, 0, 0), true)
        elseif _ENV.ValidTarget(enemy) and not enemy.dead and _ENV.GetDistance(enemy) < 2000 and _ENV.QReady and _ENV.getDmg("Q", enemy, _ENV.myHero, 3) > enemy.health then
          _ENV.DrawText3D("Full Q", enemy.x, enemy.y, enemy.z, 20, _ENV.ARGB(255, 255, 0, 0), true)
        elseif _ENV.ValidTarget(enemy) and not enemy.dead and _ENV.GetDistance(enemy) < 2000 and _ENV.RReady and _ENV.getDmg("R", enemy, _ENV.myHero) > enemy.health then
          _ENV.DrawText3D("R", enemy.x, enemy.y, enemy.z, 20, _ENV.ARGB(255, 255, 0, 0), true)
        elseif _ENV.ValidTarget(enemy) and not enemy.dead and _ENV.GetDistance(enemy) < 2000 and _ENV.EReady and 2 * _ENV.getDmg("E", enemy, _ENV.myHero) > enemy.health then
          _ENV.DrawText3D("2E", enemy.x, enemy.y, enemy.z, 20, _ENV.ARGB(255, 255, 0, 0), true)
        elseif _ENV.ValidTarget(enemy) and not enemy.dead and _ENV.GetDistance(enemy) < 2000 and _ENV.EReady and _ENV.QReady and 2 * _ENV.getDmg("E", enemy, _ENV.myHero) + _ENV.getDmg("Q", enemy, _ENV.myHero, 3) > enemy.health then
          _ENV.DrawText3D("Q+2E", enemy.x, enemy.y, enemy.z, 20, _ENV.ARGB(255, 255, 0, 0), true)
        elseif _ENV.ValidTarget(enemy) and not enemy.dead and _ENV.GetDistance(enemy) < 2000 and _ENV.RReady and _ENV.QReady and _ENV.getDmg("Q", enemy, _ENV.myHero) + _ENV.getDmg("R", enemy, _ENV.myHero) > enemy.health then
          _ENV.DrawText3D("Q+R", enemy.x, enemy.y, enemy.z, 20, _ENV.ARGB(255, 255, 0, 0), true)
        elseif _ENV.ValidTarget(enemy) and not enemy.dead and _ENV.GetDistance(enemy) < 2000 and _ENV.RReady and _ENV.QReady and _ENV.EReady and _ENV.getDmg("Q", enemy, _ENV.myHero) + _ENV.getDmg("R", enemy, _ENV.myHero) + 2 * _ENV.getDmg("E", enemy, _ENV.myHero) > enemy.health then
          _ENV.DrawText3D("Q+R+2E", enemy.x, enemy.y, enemy.z, 20, _ENV.ARGB(255, 255, 0, 0), true)
        elseif _ENV.ValidTarget(enemy) and enemy ~= nil then
          _ENV.DrawText3D("Not Killable", enemy.x, enemy.y, enemy.z, 20, _ENV.ARGB(255, 255, 0, 0), true)
        end
      end
    end
  end
end
function CastUlt(startPos, endPos)
  Packet("S_CAST", {
    spellId = _R,
    fromX = startPos.x,
    fromY = startPos.z,
    toX = endPos.x,
    toY = endPos.z
  }):send()
end
function Checks()
  QReady = myHero:CanUseSpell(_Q) == READY
  WReady = myHero:CanUseSpell(_W) == READY
  EReady = myHero:CanUseSpell(_E) == READY
  RReady = myHero:CanUseSpell(_R) == READY
  if myHero.mana > 80 then
    CanCast = false
  end
  if not QReady then
    LastQTick = 0
  end
  if myHero.dead then
    LastETick = 0
    isSecondE = false
  end
end
function checkOrbwalker()
  if _G.MMA_Loaded ~= nil and _G.MMA_Loaded then
    IsMMALoaded = true
    print("MMA detected, using MMA compatibility")
  elseif _G.AutoCarry then
    IsSACLoaded = true
    print("SAC detected, using SAC compatibility")
  elseif FileExist(LIB_PATH .. "SOW.lua") then
    require("SOW")
    SOWi = SOW(VP)
    IsSowLoaded = true
    SOWi:RegisterAfterAttackCallback(AutoAttackReset)
    print("SOW loaded, using SOW compatibility")
  else
    print("Please use SAC, MMA, or SOW for your orbwalker")
  end
end
